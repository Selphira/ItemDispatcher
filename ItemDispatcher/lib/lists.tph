OUTER_TEXT_SPRINT ~regex_folders~ ~^.*[^\.]$~
OUTER_TEXT_SPRINT ~regex_2da_files~ ~^.*\.2da$~

/*
 * Cette fonction va fusionner le contenu des différentes listes dans un dossier de travail.
 * Elle va scanner le dossier d'installation à la recherche des mods qui ont implémentés des listes pour ItemDispatcher.
 *
 */
DEFINE_ACTION_FUNCTION ~lists#merge~
BEGIN
    PRINT ~Analyse des dossiers des mods...~ SILENT
    ACTION_CLEAR_ARRAY ~folders~
	GET_DIRECTORY_ARRAY ~folders~ ~.~ ~%regex_folders%~
	ACTION_PHP_EACH ~folders~ AS _ => folder BEGIN
        OUTER_TEXT_SPRINT ~dispatching_folder~ ~%folder%/dispatching~
        OUTER_PATCH_SAVE ~mod_name~ ~%folder%~ BEGIN REPLACE_TEXTUALLY ~./~ ~~ END
	    ACTION_IF DIRECTORY_EXISTS ~%dispatching_folder%~ BEGIN
	        LAF ~lists#merge#folder~ STR_VAR folder = ~%dispatching_folder%~ END
	    END
	END
END

DEFINE_ACTION_FUNCTION ~lists#merge#folder~
    STR_VAR
        folder = ~~
        prefix = ~~
        type = ~~
BEGIN
    ACTION_CLEAR_ARRAY ~files~
    ACTION_CLEAR_ARRAY ~folders~

	GET_FILE_ARRAY ~files~ ~%folder%~ ~%regex_2da_files%~
	GET_DIRECTORY_ARRAY ~folders~ ~%folder%~ ~%regex_folders%~

	ACTION_PHP_EACH ~files~ AS _ => file BEGIN
	    LAF ~lists#merge#file~ STR_VAR file prefix type END
	END

	ACTION_IF ~%type%~ STRING_EQUAL_CASE ~~ BEGIN
        ACTION_PHP_EACH ~folders~ AS _ => subfolder BEGIN
            OUTER_PATCH_SAVE type ~%subfolder%~ BEGIN REPLACE_TEXTUALLY ~%folder%/~ ~~ END
            LAF ~lists#merge#folder~ STR_VAR folder = ~%subfolder%~ type END
        END
	END
	ELSE BEGIN
        ACTION_PHP_EACH ~folders~ AS _ => subfolder BEGIN
            OUTER_PATCH_SAVE new_prefix ~%prefix%%subfolder%-~ BEGIN REPLACE_TEXTUALLY ~%folder%/~ ~~ END
            LAF ~lists#merge#folder~ STR_VAR folder = ~%subfolder%~ prefix = ~%new_prefix%~ type END
        END
	END
END

DEFINE_ACTION_FUNCTION ~lists#merge#file~
    STR_VAR
        file = ~~
        prefix = ~~
        type = ~~
BEGIN
    OUTER_PATCH_SAVE ~file_name~ ~%file%~ BEGIN REPLACE_TEXTUALLY ~%folder%/~ ~~ END
    OUTER_TEXT_SPRINT ~file_path~ ~%type%/%prefix%%file_name%~
    OUTER_TEXT_SPRINT ~work_file_path~ ~%workspace%/%file_path%~

    ACTION_IF ~%type%~ STRING_EQUAL_CASE ~~ BEGIN
        OUTER_PATCH_SAVE ~type~ ~%file_name%~ BEGIN REPLACE_TEXTUALLY ~\.2da~ ~~ END
    END

    ACTION_MATCH ~%type%~
    WITH
        ~items~     BEGIN LAF ~lists#merge#file_items~ STR_VAR file END END
        ~groups~ ~ignored~ BEGIN LAF ~lists#merge#file_groups~ STR_VAR file END END
        ~treasures~ BEGIN LAF ~lists#merge#file_treasures~ STR_VAR file END END
      DEFAULT     LAF ~log#add#warning~ STR_VAR message = ~Unsupported file type : %file% (%mod_name%)~ END
    END
END

DEFINE_ACTION_FUNCTION ~lists#merge#file_items~
    STR_VAR
        file = ~~
BEGIN
    ACTION_IF (NOT FILE_EXISTS ~%work_file_path%~) BEGIN
        COPY ~.../inlined/blank~ ~%work_file_path%~
    END
    COPY ~%file%~ ~override~
        READ_2DA_ENTRIES_NOW ~rows~ 13
        FOR (row = 1; row < rows; ++row) BEGIN
            READ_2DA_ENTRY_FORMER ~rows~ row  0 item_quantity
            READ_2DA_ENTRY_FORMER ~rows~ row  1 item_per_target
            READ_2DA_ENTRY_FORMER ~rows~ row  2 stack_size
            READ_2DA_ENTRY_FORMER ~rows~ row  3 item
            READ_2DA_ENTRY_FORMER ~rows~ row  4 target_quantity
            READ_2DA_ENTRY_FORMER ~rows~ row  5 target
            READ_2DA_ENTRY_FORMER ~rows~ row  6 source
            READ_2DA_ENTRY_FORMER ~rows~ row  7 chapter
            READ_2DA_ENTRY_FORMER ~rows~ row  8 time_of_day
            READ_2DA_ENTRY_FORMER ~rows~ row  9 difficulty
            READ_2DA_ENTRY_FORMER ~rows~ row 10 equipable
            READ_2DA_ENTRY_FORMER ~rows~ row 11 stealable
            READ_2DA_ENTRY_FORMER ~rows~ row 12 droppable
            READ_2DA_ENTRY_FORMER ~rows~ row 13 chance

            SPRINT ~line~ ~%item_quantity%%TAB%%item_per_target%%TAB%%stack_size%%TAB%%item%%TAB%%target_quantity%%TAB%%target%%TAB%%source%%TAB%%chapter%%TAB%%time_of_day%%TAB%%difficulty%%TAB%%equipable%%TAB%%stealable%%TAB%%droppable%%TAB%%chance%~

            LPF ~lists#merge#append_line~ STR_VAR line END
        END
    BUT_ONLY
END

DEFINE_ACTION_FUNCTION ~lists#merge#file_groups~
    STR_VAR
        file = ~~
BEGIN
    ACTION_IF (NOT FILE_EXISTS ~%work_file_path%~) BEGIN
        COPY ~.../inlined/blank~ ~%work_file_path%~
    END
    COPY ~%file%~ ~override~
        READ_2DA_ENTRIES_NOW ~rows~ 1
        FOR (row = 0; row < rows; ++row) BEGIN
            READ_2DA_ENTRY_FORMER ~rows~ row 0 target

            SPRINT ~line~ ~%target%~

            LPF ~lists#merge#append_line~ STR_VAR line END
        END
    BUT_ONLY
END

DEFINE_ACTION_FUNCTION ~lists#merge#file_treasures~
    STR_VAR
        file = ~~
BEGIN
    OUTER_PATCH_SAVE ~treasure_name~ ~%file_name%~ BEGIN REPLACE_TEXTUALLY ~\.2da~ ~~ END

    ACTION_IF STRING_LENGTH ~%treasure_name%~ <= 8 BEGIN
        ACTION_IF (NOT FILE_EXISTS ~%work_file_path%~) BEGIN
            COPY ~.../inlined/blank~ ~%work_file_path%~
        END
        COPY ~%file%~ ~override~
            READ_2DA_ENTRIES_NOW ~rows~ 1
            FOR (row = 0; row < rows; ++row) BEGIN
                READ_2DA_ENTRY_FORMER ~rows~ row 0 item

                SPRINT ~line~ ~%item%~

                LPF ~lists#merge#append_line~ STR_VAR line END
            END
        BUT_ONLY
    END
    ELSE BEGIN
        LAF ~log#add#error~ STR_VAR message = ~%treasure_name% : Treasure list name exceeds 8 characters (%mod_name%)~ END
    END
END

DEFINE_DIMORPHIC_FUNCTION ~lists#merge#append_line~
    STR_VAR
        line = ~~
BEGIN
    OUTER_PATCH_SAVE ~unless~ ~%line%~ BEGIN
        REPLACE_TEXTUALLY ~\.~ ~\\.~
        REPLACE_TEXTUALLY ~\?~ ~\\?~
        REPLACE_TEXTUALLY ~\*~ ~\\*~
    END
    APPEND_OUTER ~%work_file_path%~ ~%line%%TAB%%mod_name%~ UNLESS ~^%unless%%TAB%~ KEEP_CRLF
END

DEFINE_ACTION_MACRO ~lists#load~
BEGIN
    PRINT ~Chargement des listes...~ SILENT
	ACTION_DEFINE_ARRAY ~groups~ BEGIN END

    LAM ~lists#load#items~
    OUTER_SPRINT ~load_file_path~ ~%workspace%/groups~
    LAM ~lists#load#groups~
    OUTER_SPRINT ~load_file_path~ ~%workspace%/ignored.2da~
    LAM ~lists#load#groups~
    LAM ~lists#load#treasures~

    // On filtre d'avance les tableaux contenant tous les éléments disponibles à la sélection pour retirer les éléments ignorés.
    LAF ~tool#array#diff~ STR_VAR array = ~group_cre_all~ array2 = ~group_ignored~ RET $group_count(~group_cre_all~) = count RET_ARRAY group_cre_all = new_array END
    LAF ~tool#array#diff~ STR_VAR array = ~group_itm_all~ array2 = ~group_ignored~ RET $group_count(~group_itm_all~) = count RET_ARRAY group_itm_all = new_array END
    LAF ~tool#array#diff~ STR_VAR array = ~group_sto_all~ array2 = ~group_ignored~ RET $group_count(~group_sto_all~) = count RET_ARRAY group_sto_all = new_array END
    LAF ~tool#array#diff~ STR_VAR array = ~group_cnt_all~ array2 = ~group_ignored~ RET $group_count(~group_cnt_all~) = count RET_ARRAY group_cnt_all = new_array END
END

DEFINE_ACTION_MACRO ~lists#load#items~
BEGIN
END

/*
 * Cette macro construit les tableaux contenant la liste des créatures contenues dans chaque groupe
 *
 * Chaque tableau de groupe ressemble à ceci :
 *
 * $group_%group_name%(0) = creature1
 * $group_%group_name%(1) = creature2
 * $group_%group_name%(2) = creature3
 * $group_%group_name%(3) = creature4
 *
 * Egalement, une entrée dans le tableau $groups est ajoutée avec le nombre d'éléments du tableau
 *
 * $groups(~%group_name%~) = 4
 */
DEFINE_ACTION_MACRO ~lists#load#groups~
BEGIN
	COPY "%load_file_path%" "override"
	    CLEAR_ARRAY ~visited_groups~
	    CLEAR_ARRAY ~temporary_groups~
	    CLEAR_ARRAY ~group_%SOURCE_RES%~

        PATCH_DEFINE_ARRAY ~visited_groups~ BEGIN END
        PATCH_DEFINE_ARRAY ~temporary_groups~ BEGIN END

	    LPF ~lists#load#group~ STR_VAR group_name = ~%SOURCE_RES%~ RET_ARRAY temporary_groups END

	    SET count = 0
        PATCH_PHP_EACH ~temporary_groups~ AS target => _ BEGIN
	        TO_LOWER target
            SET $~group_%SOURCE_RES%~(~%target%~) = 1
	        SET count += 1
        END
        SET $groups(~%SOURCE_RES%~) = count
	BUT_ONLY
END

DEFINE_PATCH_FUNCTION ~lists#load#group~
    STR_VAR
        group_name = ~~
    RET_ARRAY
        temporary_groups
BEGIN
    PATCH_IF NOT VARIABLE_IS_SET $visited_groups(~%group_name%~) BEGIN
	    SET $visited_groups(~%group_name%~) = 1

        READ_2DA_ENTRIES_NOW ~rows~ 2

        FOR (row = 0; row < rows; ++row) BEGIN
            READ_2DA_ENTRY_FORMER ~rows~ row 0 target
            READ_2DA_ENTRY_FORMER ~rows~ row 1 mod_name

            LPF ~selector#target#is_complex~ STR_VAR target RET is_complex_target = is_complex END

            PATCH_IF is_complex_target == 1 BEGIN
                SPRINT ~target_type~ ~complex~
            END
            ELSE BEGIN
                INNER_PATCH_SAVE ~target_type~ ~%target%~ BEGIN REPLACE_TEXTUALLY ~^.*\.~ ~~ END
                INNER_PATCH_SAVE ~target_name~ ~%target%~ BEGIN REPLACE_TEXTUALLY ~\..*$~ ~~ END
            END

            PATCH_MATCH ~%target_type%~
            WITH
                // Groupes de créatures
                ~cre~   BEGIN LPF ~lists#load#group.cre~ RET_ARRAY temporary_groups END END
                // ~cnt~ //TODO: les conteneurs => ar2600#2.cnt
                ~kit~   BEGIN LPF ~lists#load#group.basic~ STR_VAR group = ~group_cre_kit_%target_name%~         RET_ARRAY temporary_groups END END
                ~gen~   BEGIN LPF ~lists#load#group.basic~ STR_VAR group = ~group_cre_general_%target_name%~     RET_ARRAY temporary_groups END END
                ~rce~   BEGIN LPF ~lists#load#group.basic~ STR_VAR group = ~group_cre_race_%target_name%~        RET_ARRAY temporary_groups END END
                ~cls~   BEGIN LPF ~lists#load#group.basic~ STR_VAR group = ~group_cre_class_%target_name%~       RET_ARRAY temporary_groups END END
                ~spc~   BEGIN LPF ~lists#load#group.basic~ STR_VAR group = ~group_cre_special_%target_name%~     RET_ARRAY temporary_groups END END
                ~gnd~   BEGIN LPF ~lists#load#group.basic~ STR_VAR group = ~group_cre_gender_%target_name%~      RET_ARRAY temporary_groups END END
                ~alg~   BEGIN LPF ~lists#load#group.basic~ STR_VAR group = ~group_cre_alignment_%target_name%~   RET_ARRAY temporary_groups END END
                ~prf~   BEGIN LPF ~lists#load#group.basic~ STR_VAR group = ~group_cre_proficiency_%target_name%~ RET_ARRAY temporary_groups END END
                ~lvl~   BEGIN
                    PATCH_IF IS_AN_INT target_name BEGIN
                        LPF ~lists#load#group.basic~ STR_VAR group = ~group_cre_level_%target_name%~ RET_ARRAY temporary_groups END
                    END
                    ELSE BEGIN
                        LPF ~tool#range~ INT_VAR min = 1 max = 50 STR_VAR value = ~%target_name%~ RET min max END
                        FOR (level = min; level <= max; ++level) BEGIN
                            LPF ~lists#load#group.basic~ STR_VAR group = ~group_cre_level_%level%~ RET_ARRAY temporary_groups END
                        END
                    END
                END
                ~str~ ~int~ ~wis~ ~dex~ ~con~ ~cha~ BEGIN
                    SPRINT ability_score $ability_scores(~%target_type%~)
                    LPF ~lists#load#group.basic~ STR_VAR group = ~group_cre_%ability_score%_%target_name%~ RET_ARRAY temporary_groups END

                    PATCH_IF IS_AN_INT target_name BEGIN
                        LPF ~lists#load#group.basic~ STR_VAR group = ~group_cre_%ability_score%_%target_name%~ RET_ARRAY temporary_groups END
                    END
                    ELSE BEGIN
                        LPF ~tool#range~ INT_VAR min = 1 max = 25 STR_VAR value = ~%target_name%~ RET min max END
                        FOR (level = min; level <= max; ++level) BEGIN
                            LPF ~lists#load#group.basic~ STR_VAR group = ~group_cre_%ability_score%_%level%~ RET_ARRAY temporary_groups END
                        END
                    END
                END
                // Groupes d'objets
                ~itm~   BEGIN LPF ~lists#load#group.itm~ RET_ARRAY temporary_groups END END
                ~ilv~   BEGIN
                    PATCH_IF IS_AN_INT target_name BEGIN
                        LPF ~lists#load#group.basic~ STR_VAR group = ~group_itm_enchantment_%target_name%~ RET_ARRAY temporary_groups END
                    END
                    ELSE BEGIN
                        LPF ~tool#range~ INT_VAR min = 0 max = 6 STR_VAR value = ~%target_name%~ RET min max END
                        FOR (level = min; level <= max; ++level) BEGIN
                            LPF ~lists#load#group.basic~ STR_VAR group = ~group_itm_enchantment_%level%~ RET_ARRAY temporary_groups END
                        END
                    END
                END
                ~arm~   BEGIN LPF ~lists#load#group.basic~ STR_VAR group = ~group_itm_armor_type_%target_name%~ RET_ARRAY temporary_groups END END
                ~cat~   BEGIN LPF ~lists#load#group.basic~ STR_VAR group = ~group_itm_category_%target_name%~   RET_ARRAY temporary_groups END END
                ~slt~   BEGIN LPF ~lists#load#group.basic~ STR_VAR group = ~group_itm_slot_%target_name%~       RET_ARRAY temporary_groups END END
                ~igr~   BEGIN
                    PATCH_MATCH ~%target_name%~
                    WITH
                        ~cursed~     BEGIN LPF ~lists#load#group.basic~ STR_VAR group = ~group_itm_cursed~     RET_ARRAY temporary_groups END END
                        ~magical~    BEGIN LPF ~lists#load#group.basic~ STR_VAR group = ~group_itm_magical~    RET_ARRAY temporary_groups END END
                        ~movable~    BEGIN LPF ~lists#load#group.basic~ STR_VAR group = ~group_itm_movable~    RET_ARRAY temporary_groups END END
                        ~stackable~  BEGIN LPF ~lists#load#group.basic~ STR_VAR group = ~group_itm_stackable~  RET_ARRAY temporary_groups END END
                        ~two_handed~ BEGIN LPF ~lists#load#group.basic~ STR_VAR group = ~group_itm_two_handed~ RET_ARRAY temporary_groups END END
                        DEFAULT LPF ~log#add#error~ STR_VAR message = ~%target% : Invalid target in group %SOURCE_RES% (%mod_name%)~ END
                    END
                END
                // Groupes de magasins
                ~sto~   BEGIN LPF ~lists#load#group.sto~ RET_ARRAY temporary_groups END END
                // Groupes génériques et complexes
                ~are~   BEGIN LPF ~lists#load#group.basic~ STR_VAR group = ~group_are_%target_name%~ RET_ARRAY temporary_groups END END
                ~grp~   BEGIN LPF ~lists#load#group.grp~ RET_ARRAY temporary_groups END END
                ~complex~ BEGIN LPF ~log#add#error~ STR_VAR message = ~%target% : Complex target not yet supported %SOURCE_RES% (%mod_name%)~ END END
                DEFAULT LPF ~log#add#error~ STR_VAR message = ~%target% : Invalid target in group %SOURCE_RES% (%mod_name%)~ END
            END
        END
    END
    ELSE BEGIN
        SPRINT ~groups_path~ ~~
        PATCH_PHP_EACH ~visited_groups~ AS group => _ BEGIN
            SPRINT ~groups_path~ ~%groups_path%%group% > ~
        END
        SPRINT ~groups_path~ ~%groups_path%%group_name%~
        LPF ~log#add#warning~ STR_VAR message = ~%group_name% : Circular reference %groups_path% (%mod_name%)~ END
    END
END

DEFINE_PATCH_FUNCTION ~lists#load#group.grp~
    RET_ARRAY
        temporary_groups
BEGIN
    INNER_PATCH_SAVE ~ref_group_name~ ~%target%~ BEGIN REPLACE_TEXTUALLY ~\.grp$~ ~~ END
    SPRINT ~work_file_path~ ~%workspace%/groups/%ref_group_name%.2da~
    PATCH_IF FILE_EXISTS ~%work_file_path%~ BEGIN
        INNER_ACTION BEGIN
            COPY ~%work_file_path%~ ~~
                LPF ~lists#load#group~ STR_VAR group_name = ~%SOURCE_RES%~ RET_ARRAY temporary_groups END
            BUT_ONLY
        END
    END
    ELSE BEGIN
        LPF ~log#add#error~ STR_VAR message = ~%ref_group_name% : Group referenced in %group_name%.grp doesn't exist (%mod_name%)~ END
    END
END

DEFINE_PATCH_FUNCTION ~lists#load#group.cre~
    RET_ARRAY
        temporary_groups
BEGIN
    PATCH_IF FILE_EXISTS_IN_GAME ~%target%~ BEGIN
        SET $temporary_groups(~%target%~) = 1
    END
    ELSE BEGIN
        LPF ~log#add#warning~ STR_VAR message = ~%target% : Target not exist in group %SOURCE_RES% (%mod_name%)~ END
    END
END

DEFINE_PATCH_FUNCTION ~lists#load#group.itm~
    RET_ARRAY
        temporary_groups
BEGIN
    LPF ~lists#load#group.cre~ RET_ARRAY temporary_groups END
END

DEFINE_PATCH_FUNCTION ~lists#load#group.sto~
    RET_ARRAY
        temporary_groups
BEGIN
    LPF ~lists#load#group.cre~ RET_ARRAY temporary_groups END
END

DEFINE_PATCH_FUNCTION ~lists#load#group.basic~
    STR_VAR
        group = ~~
    RET_ARRAY
        temporary_groups
BEGIN
    PATCH_PHP_EACH ~%group%~ AS creature => _ BEGIN
        SET $temporary_groups(~%creature%~) = 1
    END
END

DEFINE_ACTION_MACRO ~lists#load#treasures~
BEGIN
END