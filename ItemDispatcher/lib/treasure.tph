/*
 *  Cette fonction charge une liste d'objets à partir d'un fichier 2DA, en associant chaque objet à un pourcentage de
 *  probabilité d'apparition.
 *  Elle fusionne les entrées dupliquées et, si le nombre d'objets dépasse une limite donnée (par défaut 100),
 *  conserve uniquement les [limit] objets avec la plus forte probabilité.
 *  Les probabilités non renseignées dans le fichier 2da seront calculées automatiquement de manière proportionnelle.
 *
 *  STR_VAR
 *      target: Le nom du trésor à charger
 *  INT_VAR
 *      limit: Détermine le nombre maximal d'objets dans la liste finale
 *  RET
 *      line: La ligne à insérer dans le fichier RNDTRES.tra
 *  RET_ARRAY
 *      random_treasures: Dictionnaire contenant les trésors déjà générés
 *      random_treasure_names: Dictionnaire contenant les noms des trésors déjà générés
 */
DEFINE_PATCH_FUNCTION ~treasure#load~
    INT_VAR
        limit = 100
    STR_VAR
        target = ~~
    RET
        line
    RET_ARRAY
        random_treasures
        random_treasure_names
BEGIN
    CLEAR_ARRAY ~list~
    CLEAR_ARRAY ~chances_list~
    CLEAR_ARRAY ~items_list~

    PATCH_DEFINE_ARRAY ~list~ BEGIN END
    PATCH_DEFINE_ARRAY ~items_list~ BEGIN END
    PATCH_DEFINE_ARRAY ~chances_list~ BEGIN END

    READ_2DA_ENTRIES_NOW ~rows~ 3

    // Chargement de la liste 2da
    FOR (row = 0; row < rows; ++row) BEGIN
        READ_2DA_ENTRY_FORMER ~rows~ row  0 item
        READ_2DA_ENTRY_FORMER ~rows~ row  1 chance
        READ_2DA_ENTRY_FORMER ~rows~ row  2 mod_name

        PATCH_IF NOT FILE_EXISTS_IN_GAME ~%item%.itm~ BEGIN
            LPF ~log#add#warning~ STR_VAR message = ~%item%.itm : Item not exist in game for treasure list %target% (%mod_name%)~ END
        END
        ELSE BEGIN
            PATCH_IF IS_AN_INT chance BEGIN
                PATCH_IF VARIABLE_IS_SET $list(~%item%~) BEGIN
                    SET $list(~%item%~) += chance
                END
                ELSE BEGIN
                    SET $list(~%item%~) = chance
                END
            END
            ELSE PATCH_IF NOT VARIABLE_IS_SET $list(~%item%~) BEGIN
                SET $list(~%item%~) = 0
            END
        END
    END

    LPF ~treasure#sort~ STR_VAR array_name = ~list~ RET_ARRAY list END
    LPF ~array#slice~ INT_VAR limit STR_VAR array_name = ~list~ RET_ARRAY list = array END
    LPF ~treasure#adjust_chances~ STR_VAR array_name = ~list~ RET_ARRAY list END
    LPF ~treasure#list_to_2da~ STR_VAR treasure_name = ~%target%~ array_name = ~list~ RET line END

    SPRINT $random_treasures(~%target%.rnd~) ~%line%~
    SPRINT $random_treasure_names(~%target%.rnd~) ~%target%~
END

/*
 *  Trie les objets de la liste par ordre décroissant de probabilité d'apparition.
 *
 *  STR_VAR
 *      array_name: Le nom du tableau à trier
 *  RET_ARRAY
 *      list: Le tableau trié
 */
DEFINE_PATCH_FUNCTION ~treasure#sort~
    STR_VAR
        array_name = ~~
    RET_ARRAY
        list
BEGIN
    CLEAR_ARRAY ~chances_list~
    CLEAR_ARRAY ~items_list~

    SET index = 0

    PATCH_PHP_EACH ~%array_name%~ AS item => chance BEGIN
        SPRINT $items_list(~%index%~) ~%item%~
        SET $chances_list(~%index%~) = chance
        SET index += 1
    END

    LPF ~array#multi_sort~ INT_VAR reverse = 1 STR_VAR array_name = ~chances_list~ array_name2 = ~items_list~ RET_ARRAY chances_list = array items_list = array2 END

    CLEAR_ARRAY ~list~

    PATCH_PHP_EACH ~chances_list~ AS idx => chance BEGIN
        SPRINT item $items_list(~%idx%~)
        SET $list(~%item%~) = chance
    END
END

DEFINE_PATCH_FUNCTION ~treasure#adjust_chances~
    INT_VAR
        limit = 100
    STR_VAR
        array_name = ~~
    RET_ARRAY
        list
BEGIN
    SET total_sum = 0
    SET items_without_chance = 0
    SET items_with_chance = 0

    LPF ~array#clone~ STR_VAR array_name RET_ARRAY list = array END

    PATCH_PHP_EACH ~list~ AS item => chance BEGIN
        PATCH_IF chance == 0 BEGIN
            SET items_without_chance += 1
        END
        ELSE BEGIN
            SET total_sum += chance
            SET items_with_chance += 1
        END
    END

    PATCH_IF total_sum + items_without_chance > 100 BEGIN
        // La somme est supérieure à 100%, réduction proportionnelle et assignation de 1% aux objets sans pourcentage
        CLEAR_ARRAY ~chances_list~
        CLEAR_ARRAY ~items_list~

        SET index = 0
        SET total = total_sum + items_without_chance
        SET total_chance = 0
        PATCH_PHP_EACH ~list~ AS item => chance BEGIN
            SPRINT $items_list(~%index%~) ~%item%~
            PATCH_IF chance > 0 BEGIN
                SET new_chance = chance * 100 / total
                SET $chances_list(~%index%~) = new_chance > 1 ? new_chance : 1
                SET total_chance += $chances_list(~%index%~)
            END
            ELSE BEGIN
                SET $chances_list(~%index%~) = 1
            END
            SET index += 1
        END

        // Correction suite aux arrondis perdus
        SET missing = 100 - total_chance - items_without_chance

        FOR (idx = 0; idx < missing; ++idx) BEGIN
            SET index = idx MODULO total
            SET $chances_list(~%index%~) += 1
        END

        CLEAR_ARRAY ~list~

        PATCH_PHP_EACH ~chances_list~ AS idx => chance BEGIN
            SPRINT item $items_list(~%idx%~)
            SET $list(~%item%~) = chance
        END
    END
    ELSE PATCH_IF total_sum + items_without_chance < 100 BEGIN
        // La somme est inférieure à 100%, répartition du manque aux objets sans pourcentage en priorité
        SET missing = 100 - total_sum
        SET number_to_distribute = items_without_chance == 0 ? items_with_chance : items_without_chance
        SET add_per_item = missing / number_to_distribute
        SET remain = missing MODULO number_to_distribute
        SET index = 0

        PATCH_PHP_EACH ~list~ AS item => chance BEGIN
            PATCH_IF chance == 0 OR items_without_chance == 0 BEGIN
                SET $list(~%item%~) += add_per_item
                PATCH_IF remain > 0 BEGIN
                    SET $list(~%item%~) += 1
                    SET remain -= 1
                END
                SET index += 1
            END
        END
    END
END

/*
 *  Génère une ligne destinée à être ajoutée dans le fichier RNDTRES.2da.
 *  Le nombre d'éléments est réduit à son maximum en fonction du plus grand dénominateur commun des chances d'apparition
 *  Le nombre maximum d'entrées sur une ligne est de 100.
 *
 *  STR_VAR
 *      array_name: Le nom du tableau contenant les éléments
 *      treasure_name: Le nom du trésor
 *  RET
 *      line: La ligne à insérer dans le fichier RNDTRES.tra
 */
DEFINE_PATCH_FUNCTION ~treasure#list_to_2da~
    STR_VAR
        array_name = ~~
        treasure_name = ~~
    RET
        line
BEGIN
    LPF ~math#greatest_common_diviso#list~ STR_VAR array_name RET divisor = greatest_common_divisor END

    SPRINT line ~%treasure_name%~

    PATCH_PHP_EACH ~%array_name%~ AS item => chance BEGIN
        SET repetition = chance / divisor
        FOR (i = 0; i < repetition; ++i) BEGIN
            SPRINT line ~%line%%TAB%%item%~
        END
    END
END

/*
 *  Génère dynamiquement un trésor aléatoire à partir d'une cible, puis le stocke dans un cache global pour éviter les
 *  doublons.
 *  Le trésor est ensuite formaté et stocké dans RNDTRES.2da avec un nom unique.
 *
 *  STR_VAR
 *      target: Identifiant du trésor à convertir (ex: "rnd:amulet.cat" ou "mytres.rnd")
 *  RET
 *      treasure_name: Nom généré du fichier trésor (ex: "RID00001")
 *      treasure_count: Compteur de trésors créés (utilisé pour le nommage des trésors dynamiques)
 *      line: La ligne formatée écrite dans RNDTRES.2da
 *  RET_ARRAY
 *      random_treasures: Dictionnaire contenant les trésors déjà générés
 *      random_treasure_names: Dictionnaire contenant les noms des trésors déjà générés
 */
DEFINE_ACTION_FUNCTION ~treasure#from_target~
    STR_VAR
        target = ~~
    RET
        treasure_name
        treasure_count
        line
    RET_ARRAY
        random_treasures
        random_treasure_names
BEGIN
    OUTER_SPRINT treasure_name ~~
    OUTER_SET treasure_count = 0

    ACTION_IF NOT VARIABLE_IS_SET $random_treasures(~%target%~) BEGIN
        ACTION_IF ~%target%~ STRING_MATCHES_REGEXP ~^rnd:[a-z0-9_#\.&]*$~ == 0 BEGIN
            OUTER_PATCH_SAVE target ~%target%~ BEGIN
                REPLACE_TEXTUALLY EVALUATE_REGEXP ~^\(rnd:\)\([a-z0-9_#\.&]*\)$~ ~\2~
            END
        END
        ELSE BEGIN
            FAIL ~Le trésor aléatoire fixe n'existe pas : %target%~
        END

        // Créer le trésor aléatoire dans RNDTRES.2da et retourner le nom du fichier
        OUTER_SET treasure_count += 1
        LAF ~string#pad_left~ INT_VAR min_length = 5 STR_VAR string = ~%treasure_count%~ RET string END

        OUTER_SPRINT item_name ~RID%string%~
        OUTER_SPRINT line ~%item_name%~

        OUTER_PATCH ~~ BEGIN
            LPF ~selector#item#get~ INT_VAR count = 100 count_is_percent = 1 STR_VAR target = ~%target%~ RET count_items RET_ARRAY items END
        END

        ACTION_IF count_items == 0 BEGIN
            FAIL ~Aucun objet pour créer le trésor aléatoire dynamique : %target%~
        END

        ACTION_PHP_EACH ~items~ AS key => value BEGIN
            OUTER_PATCH_SAVE ~value~ ~%value%~ BEGIN REPLACE_TEXTUALLY ~.itm~ ~~ END
            OUTER_SPRINT line ~%line%%TAB%%value%~
        END

        OUTER_SPRINT $random_treasures(~%target%~) ~%line%~
        OUTER_SPRINT $random_treasure_names(~%target%~) ~%item_name%~

        LAF ~treasure#save~ STR_VAR target END
    END

    OUTER_SPRINT treasure_name $random_treasure_names(~%target%~)
    OUTER_SPRINT line $random_treasures(~%target%~)
END

/*
 *  Sauvegarde un trésor aléatoire généré précédemment dans le fichier RNDTRES.2da, et crée une copie physique d’un
 *  modèle d’objet "rndtre01.itm" avec le bon nom.
 *
 *  STR_VAR
 *      target: Identifiant du trésor à sauvegarder (ex: "rnd:amulet.cat" ou "mytres.rnd")
 */
DEFINE_DIMORPHIC_FUNCTION ~treasure#save~
    STR_VAR
        target = ~~
BEGIN
    ACTION_IF VARIABLE_IS_SET $random_treasures(~%target%~) BEGIN
        OUTER_SPRINT treasure_name $random_treasure_names(~%target%~)
        OUTER_SPRINT line $random_treasures(~%target%~)

        APPEND ~rndtres.2da~ ~%line%~ UNLESS ~^%treasure_name%%TAB%~
        COPY_EXISTING ~rndtre01.itm~ ~override/%treasure_name%.itm~
    END
END
