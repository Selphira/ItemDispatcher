/*
 *  Divise une chaîne de caractères en plusieurs parties selon un séparateur et retourne sous forme de tableau.
 *
 *  INT_VAR
 *      to_key: Indique si les parties doivent être ajoutées en tant qu'indice du tableau, ou en temps que valeur.
 *  STR_VAR
 *      string: La chaîne à diviser
 *      separator: Le séparateur utilisé pour diviser la chaîne
 *  RET
 *      count: Le nombre d'éléments du tableau retourné
 *  RET_ARRAY
 *      parts: Le tableau contenant les parties de la chaîne après séparation
 */
DEFINE_DIMORPHIC_FUNCTION ~string#explode~
    INT_VAR
        to_key = 0
    STR_VAR
        string = ~~
        separator = ~ ~
    RET
        count
    RET_ARRAY
        parts
BEGIN
    ACTION_DEFINE_ARRAY ~parts~ BEGIN END

    OUTER_SPRINT ~list~ ~%string%~
    OUTER_SET count = 0

    OUTER_WHILE ~%list%~ STRING_COMPARE ~~ BEGIN
        OUTER_PATCH_SAVE list "%list%" BEGIN
            SET test = BUFFER_LENGTH

            PATCH_IF BUFFER_LENGTH > 0 BEGIN
                SET pointer = 0
                SET found   = 0
                WHILE !found BEGIN
                    READ_ASCII pointer char (1)
                    SET pointer += 1

                    PATCH_IF ~%char%~ STRING_EQUAL ~%separator%~ BEGIN
                        SET found = 1
                    END

                    PATCH_IF pointer == BUFFER_LENGTH BEGIN
                        SET found = 1
                        SET pointer += 1
                    END
                END

                READ_ASCII 0x0 part (pointer - 1)
                DELETE_BYTES 0x0 (pointer - 1)
            END
        END

        ACTION_IF STRING_LENGTH ~%part%~ == 0 BEGIN
            FAIL ~Invalid string : %string%~
        END

        OUTER_PATCH_SAVE list "%list%" BEGIN
            REPLACE_TEXTUALLY "^%separator%\(.*\)$" "\1"
        END

        ACTION_IF to_key == 0 BEGIN
            ACTION_IF ~%part%~ STRING_MATCHES_REGEXP ~^\(.*\)%separator%$~ == 0 BEGIN
                OUTER_PATCH_SAVE part "%part%" BEGIN
                    REPLACE_TEXTUALLY "^\(.*\)%separator%$" "\1"
                END
                OUTER_SPRINT $parts(~%count%~) ~%part%~
                OUTER_SET count += 1
                OUTER_SPRINT $parts(~%count%~) ~~
                OUTER_SET count += 1
            END
            ELSE BEGIN
                OUTER_SPRINT $parts(~%count%~) ~%part%~
                OUTER_SET count += 1
            END
        END
        ELSE BEGIN
            ACTION_IF ~%part%~ STRING_MATCHES_REGEXP ~^\(.*\)%separator%$~ == 0 BEGIN
                OUTER_PATCH_SAVE part "%part%" BEGIN
                    REPLACE_TEXTUALLY "^\(.*\)%separator%$" "\1"
                END
                OUTER_SPRINT $parts(~%part%~) ~%count%~
                OUTER_SET count += 1
            END
            ELSE BEGIN
                OUTER_SPRINT $parts(~%part%~) ~%count%~
                OUTER_SET count += 1
            END
        END
    END
END

/*
 *  Remplit une chaîne de caractères à gauche avec un caractère spécifié jusqu'à ce qu'elle atteigne une longueur
 *  minimale.
 *
 *  INT_VAR
 *      min_length: La longueur minimale souhaitée pour la chaîne
 *  STR_VAR
 *      string: La chaîne à compléter
 *      pad: Le caractère utilisé pour compléter la chaîne
 *  RET
 *      string: La chaîne modifiée avec des caractères ajoutés à gauche
 */
DEFINE_DIMORPHIC_FUNCTION ~string#pad_left~
    INT_VAR
        min_length = 1
    STR_VAR
        string = ~~
        pad = ~0~
    RET
        string
BEGIN
	OUTER_WHILE (STRING_LENGTH ~%string%~ < min_length) BEGIN
		OUTER_TEXT_SPRINT string ~%pad%%string%~
	END
END