/*
 *  Calcule une quantité en fonction d'un paramètre donné.
 *  Elle permet de gérer différents types de quantités comme les entiers ou les pourcentages.
 *
 *  INT_VAR
 *      default: La valeur par défaut à utiliser si value ne correspond à aucun des cas attendus
 *  STR_VAR
 *      value: La chaîne représentant la quantité
 *          - "-"   => Valeur par défaut
 *          - "10"  => Valeur de 10
 *          - "*"   => Valeur de 100%
 *          - "9%"  => Valeur de 9%
 *          - "1-8" => Valeur aléatoire entre 1 et 8
 *  RET
 *      is_percent: Indique si la quantité est un pourcentage (1) ou non (0)
 *      quantity: La quantité déterminée par la fonction
 */
DEFINE_PATCH_FUNCTION ~tool#quantity~
    INT_VAR
        default = 1
    STR_VAR
        value = ~~
    RET
        is_percent
        quantity
BEGIN
    SET is_percent = 0
    SET quantity = default

    PATCH_IF IS_AN_INT value AND value > 0 BEGIN
        SET quantity = value
    END
    ELSE PATCH_IF ~%value%~ STRING_EQUAL ~-~ BEGIN
        SET quantity = default
    END
    ELSE PATCH_IF ~%value%~ STRING_EQUAL ~*~ BEGIN
        SET is_percent = 1
        SET quantity = 100
    END
    ELSE PATCH_IF ~%value%~ STRING_MATCHES_REGEXP ~^[0-9]+%$~ == 0 BEGIN
        INNER_PATCH_SAVE ~value~ ~%value%~ BEGIN REPLACE_TEXTUALLY ~%~ ~~ END
        SET is_percent = 1
        SET quantity = value
    END
    ELSE PATCH_IF ~%value%~ STRING_MATCHES_REGEXP ~^\([0-9]+\)-\([0-9]+\)$~ == 0 BEGIN
        INNER_PATCH ~%value%~ BEGIN
            REPLACE_EVALUATE ~\([0-9]+\)-\([0-9]+\)~ BEGIN
                PATCH_IF MATCH1 > MATCH2 BEGIN
                    SET quantity = RANDOM(MATCH2 MATCH1)
                END
                ELSE BEGIN
                    SET quantity = RANDOM(MATCH1 MATCH2)
                END
            END ~~
        END
    END
    ELSE BEGIN
        LPF ~log#add#warning~ STR_VAR message = ~%value% : Invalid quantity~ END
    END
END

/*
 *  Détermine la valeur minimale et maximale d'une plage donnée.
 *  La fonction parse la valeur entrée pour déterminer si elle représente un nombre ou une plage.
 *
 *  INT_VAR
 *      min: La valeur minimale par défaut
 *      max: La valeur maximale par défaut
 *  STR_VAR
 *      value: La chaîne représentant la plage de valeurs
 *          - "10+" => Valeur entre 10 et max
 *          - "10-" => Valeur entre min et 10
 *          - "2-9" => Valeur entre 2 et 9 (ne peuvent pas dépasser les bornes min et max)
 *  RET
 *      min: La valeur minimale de la plage
 *      max: La valeur maximale de la plage
 */
DEFINE_DIMORPHIC_FUNCTION ~tool#range~
    INT_VAR
        min = 0
        max = 0
    STR_VAR
        value = ~~
    RET
        min
        max
BEGIN
    OUTER_SET is_percent = 0
    OUTER_SET quantity = 1

    ACTION_IF IS_AN_INT value AND value > 0 BEGIN
        OUTER_SET min = value > min ? value : min
        OUTER_SET max = value < max ? value : max
    END
    ELSE ACTION_IF ~%value%~ STRING_MATCHES_REGEXP ~^\([0-9]+\)\+$~ == 0 BEGIN
        OUTER_PATCH_SAVE ~value~ ~%value%~ BEGIN REPLACE_TEXTUALLY ~\+~ ~~ END
        OUTER_SET min = value > min ? value : min
    END
    ELSE ACTION_IF ~%value%~ STRING_MATCHES_REGEXP ~^\([0-9]+\)-$~ == 0 BEGIN
        OUTER_PATCH_SAVE ~value~ ~%value%~ BEGIN REPLACE_TEXTUALLY ~-~ ~~ END
        OUTER_SET max = value < max ? value : max
    END
    ELSE ACTION_IF ~%value%~ STRING_MATCHES_REGEXP ~^\([0-9]+\)-\([0-9]+\)$~ == 0 BEGIN
        OUTER_PATCH ~%value%~ BEGIN
            REPLACE_EVALUATE ~\([0-9]+\)-\([0-9]+\)~ BEGIN
                PATCH_IF MATCH1 > MATCH2 BEGIN
                    SET min = MATCH2 > min ? MATCH2 : min
                    SET max = MATCH1 < max ? MATCH1 : max
                END
                ELSE BEGIN
                    SET min = MATCH1 > min ? MATCH1 : min
                    SET max = MATCH2 < max ? MATCH2 : max
                END
            END ~~
        END
    END
    ELSE BEGIN
        FAIL ~Invalid range (%value%)~
    END
END

/*
 *  Convertit un paramètre d'entrée en valeur booléenne (0 ou 1).
 *
 *  INT_VAR
 *      default: La valeur par défaut
 *  STR_VAR
 *      value: La valeur à convertir en booléen
 *          - "0" => Valeur de 0
 *          - "1" => Valeur de 1
 *          - "?" => Valeur aléatoire entre 1 et 0
 *          - Toute autre valeur => Valeur par défaut
 *  RET
 *      boolean: La valeur booléenne
 */
DEFINE_PATCH_FUNCTION ~tool#boolean~
    INT_VAR
        default = 0
    STR_VAR
        value = ~~
    RET
        boolean
BEGIN
    SET ~boolean~ = default

    PATCH_IF IS_AN_INT value AND (value == 0 OR value == 1) BEGIN
        SET ~boolean~ = value
    END
    ELSE PATCH_IF ~%value%~ STRING_EQUAL ~?~ BEGIN
        SET ~boolean~ = RANDOM(0 1)
    END
END

/*
 *  Ajuste une valeur entière en fonction des bornes min et max spécifiées.
 *
 *  INT_VAR
 *      default: La valeur par défaut
 *      min: La valeur minimale
 *      max: La valeur maximale
 *  STR_VAR
 *      value: La valeur à ajuster
 *  RET
 *      integer: La valeur entière ajustée
 */
DEFINE_PATCH_FUNCTION ~tool#integer~
    INT_VAR
        default = 0
        min = 0
        max = 0
    STR_VAR
        value = ~~
    RET
        integer
BEGIN
    SET ~integer~ = default

    PATCH_IF IS_AN_INT value BEGIN
        SET ~integer~ = value
    END

    PATCH_IF min > integer BEGIN
        SET integer = min
    END

    PATCH_IF max < integer BEGIN
        SET integer = max
    END
END

DEFINE_PATCH_FUNCTION ~tool#values~
    INT_VAR
        min = 0
        max = 0
    STR_VAR
        value = ~~
    RET
        count
    RET_ARRAY
        values
BEGIN
    CLEAR_ARRAY ~values~

    PATCH_DEFINE_ARRAY ~values~ BEGIN END

    SET ~count~ = 0
    SET ~value_min~ = 0
    SET ~value_max~ = 0

    PATCH_IF ~%value%~ STRING_EQUAL ~-~ BEGIN END
    ELSE PATCH_IF ~%value%~ STRING_MATCHES_REGEXP ~^\([0-9]+\)-\([0-9]+\)$~ == 0 BEGIN
        INNER_PATCH ~%value%~ BEGIN
            REPLACE_EVALUATE ~\([0-9]+\)-\([0-9]+\)~ BEGIN
                PATCH_IF MATCH1 > MATCH2 BEGIN
                    SET value_min = MATCH2
                    SET value_max = MATCH1
                END
                ELSE BEGIN
                    SET value_min = MATCH1
                    SET value_max = MATCH2
                END
            END ~~
        END
    END
    ELSE PATCH_IF ~%value%~ STRING_MATCHES_REGEXP ~^\([0-9]+\)\+$~ == 0 BEGIN
        INNER_PATCH_SAVE ~value~ ~%value%~ BEGIN REPLACE_TEXTUALLY ~\+~ ~~ END
        SET ~value_min~ = value
        SET ~value_max~ = max
    END
    ELSE PATCH_IF ~%value%~ STRING_MATCHES_REGEXP ~^\([0-9]+\)-$~ == 0 BEGIN
        INNER_PATCH_SAVE ~value~ ~%value%~ BEGIN REPLACE_TEXTUALLY ~-~ ~~ END
        SET ~value_min~ = min
        SET ~value_max~ = value
    END
    ELSE PATCH_IF IS_AN_INT value BEGIN
        SET ~value_min~ = value
        SET ~value_max~ = value
    END

    PATCH_IF min > value_min BEGIN
        SET value_min = min
    END

    PATCH_IF max < value_max BEGIN
        SET value_max = max
    END

    PATCH_IF value_min <= value_max OR (value_min == value_max AND value_min != 0) BEGIN
        FOR (index = value_min; index <= value_max; ++index) BEGIN
            SET $values(~%count%~) = index
            SET count += 1
        END
    END
END

DEFINE_DIMORPHIC_FUNCTION ~tool#item#get_charges~
    STR_VAR
        item = ~~
    RET
        charge
BEGIN
    OUTER_SET charge = 0
    COPY_EXISTING ~%item%.itm~ ~override~
        READ_SHORT 0x68 count_headers
        READ_LONG  0x64 offset_headers
        FOR (index = 0; index < count_headers; index += 1) BEGIN
            READ_SHORT (offset_headers + (index * 0x38) + 0x22) charge
            SET index = count_headers
        END
    BUT_ONLY
END

DEFINE_DIMORPHIC_FUNCTION ~tool#item#flags~
    INT_VAR
        identified = 1
        droppable = 0
        stealable = 0
        weidu = 0
    RET
        flags
BEGIN
    ACTION_IF weidu == 1 BEGIN
        OUTER_SPRINT flags ~IDENTIFIED~

        ACTION_IF stealable == 0 BEGIN
            OUTER_SPRINT flags ~%flags%&UNSTEALABLE~
        END
        ACTION_IF droppable == 0 BEGIN
            OUTER_SPRINT flags ~%flags%&UNDROPPABLE~
        END
    END
    ELSE BEGIN
        OUTER_SET flags = 1 // IDENTIFIED

        ACTION_IF stealable == 0 BEGIN
            OUTER_SET flags += 2 // NONSTEALABLE
        END
        ACTION_IF droppable == 0 BEGIN
            OUTER_SET flags += 8 // NONDROPABLE
        END
    END
END