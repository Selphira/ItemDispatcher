DEFINE_PATCH_FUNCTION ~tool#quantity~
    INT_VAR
        default = 1
    STR_VAR
        value = ~~
    RET
        is_percent
        quantity
BEGIN
    SET is_percent = 0
    SET quantity = default

    PATCH_IF IS_AN_INT value AND value > 0 BEGIN
        SET quantity = value
    END
    ELSE PATCH_IF ~%value%~ STRING_EQUAL ~-~ BEGIN
        SET quantity = default
    END
    ELSE PATCH_IF ~%value%~ STRING_EQUAL ~*~ BEGIN
        SET is_percent = 1
        SET quantity = 100
    END
    ELSE PATCH_IF ~%value%~ STRING_MATCHES_REGEXP ~^[0-9]+%$~ == 0 BEGIN
        INNER_PATCH_SAVE ~value~ ~%value%~ BEGIN REPLACE_TEXTUALLY ~%~ ~~ END
        SET is_percent = 1
        SET quantity = value
    END
    ELSE PATCH_IF ~%value%~ STRING_MATCHES_REGEXP ~^\([0-9]+\)-\([0-9]+\)$~ == 0 BEGIN
        INNER_PATCH ~%value%~ BEGIN
            REPLACE_EVALUATE ~\([0-9]+\)-\([0-9]+\)~ BEGIN
                PATCH_IF MATCH1 > MATCH2 BEGIN
                    SET quantity = RANDOM(MATCH2 MATCH1)
                END
                ELSE BEGIN
                    SET quantity = RANDOM(MATCH1 MATCH2)
                END
            END ~~
        END
    END
    ELSE BEGIN
        LPF ~log#add#warning~ STR_VAR message = ~%value% : Invalid quantity~ END
    END
END

DEFINE_PATCH_FUNCTION ~tool#range~
    INT_VAR
        min = 0
        max = 0
    STR_VAR
        value = ~~
    RET
        min
        max
BEGIN
    SET is_percent = 0
    SET quantity = 1

    PATCH_IF IS_AN_INT value AND value > 0 BEGIN
        SET min = value > min ? value : min
        SET max = value < max ? value : max
    END
    ELSE PATCH_IF ~%value%~ STRING_MATCHES_REGEXP ~^\([0-9]+\)\+$~ == 0 BEGIN
        INNER_PATCH_SAVE ~value~ ~%value%~ BEGIN REPLACE_TEXTUALLY ~\+~ ~~ END
        SET min = value > min ? value : min
    END
    ELSE PATCH_IF ~%value%~ STRING_MATCHES_REGEXP ~^\([0-9]+\)-$~ == 0 BEGIN
        INNER_PATCH_SAVE ~value~ ~%value%~ BEGIN REPLACE_TEXTUALLY ~-~ ~~ END
        SET max = value < max ? value : max
    END
    ELSE PATCH_IF ~%value%~ STRING_MATCHES_REGEXP ~^\([0-9]+\)-\([0-9]+\)$~ == 0 BEGIN
        INNER_PATCH ~%value%~ BEGIN
            REPLACE_EVALUATE ~\([0-9]+\)-\([0-9]+\)~ BEGIN
                PATCH_IF MATCH1 > MATCH2 BEGIN
                    SET min = MATCH2 > min ? MATCH2 : min
                    SET max = MATCH1 < max ? MATCH1 : max
                END
                ELSE BEGIN
                    SET min = MATCH1 > min ? MATCH1 : min
                    SET max = MATCH2 < max ? MATCH2 : max
                END
            END ~~
        END
    END
    ELSE BEGIN
        PATCH_FAIL ~Invalid range (%value%)~
    END
END

DEFINE_PATCH_FUNCTION ~tool#boolean~
    INT_VAR
        default = 0
    STR_VAR
        value = ~~
    RET
        boolean
BEGIN
    SET ~boolean~ = default

    PATCH_IF IS_AN_INT value AND (value == 0 OR value == 1) BEGIN
        SET ~boolean~ = value
    END
    ELSE PATCH_IF ~%value%~ STRING_EQUAL ~?~ BEGIN
        SET ~boolean~ = RANDOM(0 1)
    END
END

DEFINE_PATCH_FUNCTION ~tool#integer~
    INT_VAR
        default = 100
        min = 0
        max = 0
    STR_VAR
        value = ~~
    RET
        integer
BEGIN
    SET ~integer~ = default

    PATCH_IF IS_AN_INT value AND value > 0 AND value <= 100 BEGIN
        SET ~integer~ = value
    END

    PATCH_IF min > integer BEGIN
        SET integer = min
    END

    PATCH_IF max < integer BEGIN
        SET integer = max
    END
END

DEFINE_PATCH_FUNCTION ~tool#values~
    INT_VAR
        min = 0
        max = 0
    STR_VAR
        value = ~~
    RET
        count
    RET_ARRAY
        values
BEGIN
    CLEAR_ARRAY ~values~

    PATCH_DEFINE_ARRAY ~values~ BEGIN END

    SET ~count~ = 0
    SET ~value_min~ = 0
    SET ~value_max~ = 0

    PATCH_IF ~%value%~ STRING_EQUAL ~-~ BEGIN END
    ELSE PATCH_IF ~%value%~ STRING_MATCHES_REGEXP ~^\([0-9]+\)-\([0-9]+\)$~ == 0 BEGIN
        INNER_PATCH ~%value%~ BEGIN
            REPLACE_EVALUATE ~\([0-9]+\)-\([0-9]+\)~ BEGIN
                PATCH_IF MATCH1 > MATCH2 BEGIN
                    SET value_min = MATCH2
                    SET value_max = MATCH1
                END
                ELSE BEGIN
                    SET value_min = MATCH1
                    SET value_max = MATCH2
                END
            END ~~
        END
    END
    ELSE PATCH_IF ~%value%~ STRING_MATCHES_REGEXP ~^\([0-9]+\)\+$~ == 0 BEGIN
        INNER_PATCH_SAVE ~value~ ~%value%~ BEGIN REPLACE_TEXTUALLY ~\+~ ~~ END
        SET ~value_min~ = value
        SET ~value_max~ = max
    END
    ELSE PATCH_IF ~%value%~ STRING_MATCHES_REGEXP ~^\([0-9]+\)-$~ == 0 BEGIN
        INNER_PATCH_SAVE ~value~ ~%value%~ BEGIN REPLACE_TEXTUALLY ~-~ ~~ END
        SET ~value_min~ = min
        SET ~value_max~ = value
    END
    ELSE PATCH_IF IS_AN_INT value BEGIN
        SET ~value_min~ = value
        SET ~value_max~ = value
    END

    PATCH_IF min > value_min BEGIN
        SET value_min = min
    END

    PATCH_IF max < value_max BEGIN
        SET value_max = max
    END

    PATCH_IF value_min <= value_max OR (value_min == value_max AND value_min != 0) BEGIN
        FOR (index = value_min; index <= value_max; ++index) BEGIN
            SET $values(~%count%~) = index
            SET count += 1
        END
    END
END

DEFINE_DIMORPHIC_FUNCTION ~tool#string#explode~
    STR_VAR
        string = ~~
        separator = ~ ~
    RET_ARRAY
        parts
BEGIN
    ACTION_DEFINE_ARRAY ~parts~ BEGIN END

    OUTER_SPRINT ~list~ ~%string%~
    OUTER_SET index = 0

    OUTER_WHILE ~%list%~ STRING_COMPARE ~~ BEGIN
        OUTER_PATCH_SAVE list "%list%" BEGIN
            SET test = BUFFER_LENGTH

            PATCH_IF BUFFER_LENGTH > 0 BEGIN
                SET pointer = 0
                SET found   = 0
                WHILE !found BEGIN
                    READ_ASCII pointer char (1)
                    SET pointer += 1

                    PATCH_IF ~%char%~ STRING_EQUAL ~%separator%~ BEGIN
                        SET found = 1
                    END

                    PATCH_IF pointer == BUFFER_LENGTH BEGIN
                        SET found = 1
                        SET pointer += 1
                    END
                END

                READ_ASCII 0x0 part (pointer - 1)
                DELETE_BYTES 0x0 (pointer - 1)
            END
        END

        ACTION_IF STRING_LENGTH ~%part%~ == 0 BEGIN
            FAIL ~Invalid string : %string%~
        END

        OUTER_PATCH_SAVE list "%list%" BEGIN
            REPLACE_TEXTUALLY "^%separator%\(.*\)$" "\1"
        END

        ACTION_IF ~%part%~ STRING_MATCHES_REGEXP ~^\(.*\)%separator%$~ == 0 BEGIN
            OUTER_PATCH_SAVE part "%part%" BEGIN
                REPLACE_TEXTUALLY "^\(.*\)%separator%$" "\1"
            END
            OUTER_SPRINT $parts(~%index%~) ~%part%~
            OUTER_SET index += 1
            OUTER_SPRINT $parts(~%index%~) ~~
            OUTER_SET index += 1
        END
        ELSE BEGIN
            OUTER_SPRINT $parts(~%index%~) ~%part%~
            OUTER_SET index += 1
        END
    END
END

DEFINE_DIMORPHIC_FUNCTION ~tool#array#clone~
    STR_VAR
        array = ~~
    RET
        count
    RET_ARRAY
        new_array
BEGIN
    OUTER_SET count = 0
    ACTION_CLEAR_ARRAY new_array
    ACTION_PHP_EACH ~%array%~ AS key => value BEGIN
        OUTER_SPRINT $new_array(~%key%~) ~%value%~
        OUTER_SET count += 1
    END
END

DEFINE_DIMORPHIC_FUNCTION ~tool#array#merge~
    STR_VAR
        array = ~~
        array2 = ~~
    RET
        count
    RET_ARRAY
        array
BEGIN
    OUTER_SET count = 0

    ACTION_PHP_EACH ~%array2%~ AS key => value BEGIN
        OUTER_SPRINT $array(~%key%~) ~%value%~
    END

    ACTION_PHP_EACH ~%array%~ AS key => value BEGIN
        OUTER_SET count += 1
    END
END

DEFINE_DIMORPHIC_FUNCTION ~tool#array#intersect~
    INT_VAR
        count_array = 0
        count_array2 = 0
    STR_VAR
        array = ~~
        array2 = ~~
    RET
        count
    RET_ARRAY
        new_array
BEGIN
    OUTER_SET count = 0
    ACTION_CLEAR_ARRAY new_array

    ACTION_IF count_array > 0 AND count_array2 > 0 BEGIN
        //FIXME: Problème avec l'optimisation
        //       Il semble que le VARIABLE_IS_SET retourne VRAI lorsque le tableau est inversé
        //       Généralement, le tableau 1 est celui qui a contenu à un moment donné toutes les possibilités.
        //       Le PHP_EACH ne trouve cependant pas les entrées dont le VARIABLE_IS_SET retourne VRAI.
        /*
        ACTION_IF count_array > count_array2 BEGIN
            OUTER_SPRINT tmp ~%array%~
            OUTER_SPRINT array ~%array2%~
            OUTER_SPRINT array2 ~%tmp%~
        END
        */

        ACTION_PHP_EACH ~%array%~ AS key => value BEGIN
            ACTION_IF VARIABLE_IS_SET $~%array2%~(~%key%~) BEGIN
                OUTER_SPRINT $new_array(~%key%~) ~%value%~
                OUTER_SET count += 1
            END
        END
    END
END

DEFINE_DIMORPHIC_FUNCTION ~tool#array#diff~
    STR_VAR
        array = ~~
        array2 = ~~
    RET
        count
    RET_ARRAY
        new_array
BEGIN
    OUTER_SET count = 0
    ACTION_CLEAR_ARRAY new_array

    ACTION_PHP_EACH ~%array%~ AS key => value BEGIN
        ACTION_IF NOT VARIABLE_IS_SET $~%array2%~(~%key%~) BEGIN
            OUTER_SPRINT $new_array(~%key%~) ~%value%~
            OUTER_SET count += 1
        END
    END
END

DEFINE_DIMORPHIC_FUNCTION ~tool#array#get_random~
    INT_VAR
        array_count = 0
        number_to_select = 0
    STR_VAR
        array = ~~
    RET
        count_selected
    RET_ARRAY
        selected_array
BEGIN
    ACTION_CLEAR_ARRAY selected_array

    ACTION_IF array_count <= number_to_select BEGIN
        LAF ~tool#array#clone~ STR_VAR array RET count_selected = count RET_ARRAY selected_array = new_array END
    END
    ELSE BEGIN
        OUTER_SET count_selected = number_to_select
        OUTER_FOR (index = 0; index < number_to_select; ++index) BEGIN
            OUTER_SET selected = RANDOM(1 array_count)
            OUTER_SPRINT $selected_array(~%index%~) $~%array%~(~%selected%~)
            OUTER_SPRINT $~%array%~(~%selected%~) $~%array%~(~%array_count%~)
            OUTER_SET array_count -= 1
        END
    END
END

DEFINE_DIMORPHIC_FUNCTION ~tool#item#get_charges~
    STR_VAR
        item = ~~
    RET
        charge
BEGIN
    OUTER_SET charge = 0
    COPY_EXISTING ~%item%.itm~ ~override~
        READ_SHORT 0x68 count_headers
        READ_LONG  0x64 offset_headers
        FOR (index = 0; index < count_headers; index += 1) BEGIN
            READ_SHORT (offset_headers + (index * 0x38) + 0x22) charge
            SET index = count_headers
        END
    BUT_ONLY
END