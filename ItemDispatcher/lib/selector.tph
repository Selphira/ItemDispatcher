DEFINE_PATCH_FUNCTION ~selector#item#get~
    STR_VAR
        target = ~~
    RET
        is_random
        item
BEGIN
    SET is_random = 0
    SET count_eligible_targets = 0
    SET count_itm_targets = 0

    SPRINT ~item~ ~~

    CLEAR_ARRAY eligible_targets
    CLEAR_ARRAY itm_targets

    PATCH_IF ~%target%~ STRING_MATCHES_REGEXP ~^[a-z0-9]+\.itm$~ == 0 BEGIN
        SPRINT ~item~ ~%target%~
    END
    ELSE BEGIN
        SET is_random = 1

        LPF ~tool#array#clone~ STR_VAR array = ~group_itm_all~ RET count_itm_targets = count RET_ARRAY itm_targets = new_array END
SET testCount = count_itm_targets
        LPM ~selector#item#filter~

        // Toutes les cibles potentielles sont placées dans un unique tableau
        PATCH_PHP_EACH ~itm_targets~ AS item => _ BEGIN
            SET count_eligible_targets += 1
            SPRINT $eligible_targets(~%count_eligible_targets%~) ~%item%~
        END

        PATCH_PRINT ~Objets potentiels pour %target% : %count_eligible_targets% / %testCount%~ PATCH_SILENT

        LPF ~tool#array#get_random~ INT_VAR array_count = count_eligible_targets number_to_select = 1 STR_VAR array = ~eligible_targets~ RET count_targets = count_selected RET_ARRAY targets = selected_array END

        PATCH_IF VARIABLE_IS_SET $targets(0) BEGIN
            SPRINT item $targets(0)
        END
    END
END

DEFINE_PATCH_MACRO ~selector#item#filter~
BEGIN
    // On ne garde que les objets déplaçables éligibles à la sélection aléatoire
    LPF ~tool#array#intersect~ STR_VAR array = ~itm_targets~ array2 = ~group_itm_movable~ RET count_itm_targets = count RET_ARRAY itm_targets = new_array END

    LPF ~tool#string#explode~ STR_VAR string = ~%target%~ separator = ~&~ RET_ARRAY parts END

    PATCH_PHP_EACH parts AS index => part BEGIN
        SET $group_count(~group_temporary~) = 0
        CLEAR_ARRAY group_temporary

        LPF ~selector#target#determine_group~ STR_VAR part RET is_negative group_name group_type RET_ARRAY group_count group_temporary END

        // On s'assure que le groupe désiré existe
        PATCH_IF NOT VARIABLE_IS_SET $group_count(~%group_name%~) BEGIN
            PATCH_FAIL ~%target% : Invalid group (%part%)~
        END

        PATCH_IF NOT VARIABLE_IS_SET $target_group_categories(~%group_type%~) BEGIN
            PATCH_FAIL ~%target% : Invalid group type (%group_type%)~
        END

        SPRINT target_group_category $target_group_categories(~%group_type%~)

        PATCH_IF NOT ~%target_group_category%~ STRING_EQUAL ~itm~ AND NOT ~%target_group_category%~ STRING_EQUAL ~~ BEGIN
            PATCH_FAIL ~%target% : Invalid group category (%target_group_category%)~
        END

        LPM ~selector#target#filter_itm~
    END
END

DEFINE_PATCH_FUNCTION ~selector#target#is_complex~
    STR_VAR
        target = ~~
    RET
        is_complex
BEGIN
    SET is_complex = 0

    PATCH_IF ~%target%~ STRING_MATCHES_REGEXP ~.*[&!].+~ == 0 BEGIN
        SET is_complex = 1
    END
END

DEFINE_PATCH_FUNCTION ~selector#target#get~
    INT_VAR
        count = 0
        count_is_percent = 0
        item_is_equipable = 0
    STR_VAR
        target = ~~
        item = ~~
    RET
        is_random
    RET_ARRAY
        targets
BEGIN
    SET is_random = 0
    SET count_targets = 0
    SET count_eligible_targets = 0
    SET count_cre_targets = 0
    SET count_sto_targets = 0
    SET count_cnt_targets = 0

    CLEAR_ARRAY targets
    CLEAR_ARRAY eligible_targets
    CLEAR_ARRAY cre_targets
    CLEAR_ARRAY sto_targets
    CLEAR_ARRAY cnt_targets

    PATCH_IF ~%target%~ STRING_MATCHES_REGEXP ~^[a-zA-Z0-9#]+\.cre$~ == 0 BEGIN
        PATCH_IF FILE_EXISTS_IN_GAME ~%target%~ BEGIN
            SPRINT $targets(1) ~%target%~
        END
    END
    ELSE BEGIN
        SET is_random = 1

        LPF ~tool#array#clone~ STR_VAR array = ~group_cre_all~ RET count_cre_targets = count RET_ARRAY cre_targets = new_array END
        LPF ~tool#array#clone~ STR_VAR array = ~group_sto_all~ RET count_sto_targets = count RET_ARRAY sto_targets = new_array END
        LPF ~tool#array#clone~ STR_VAR array = ~group_cnt_all~ RET count_sto_targets = count RET_ARRAY cnt_targets = new_array END

        LPM ~selector#target#filter~

        // Toutes les cibles potentielles sont placées dans un unique tableau
        PATCH_PHP_EACH ~cre_targets~ AS creature => _ BEGIN
            SET count_eligible_targets += 1
            SPRINT $eligible_targets(~%count_eligible_targets%~) ~%creature%~
        END
        PATCH_PHP_EACH ~sto_targets~ AS store => _ BEGIN
            SET count_eligible_targets += 1
            SPRINT $eligible_targets(~%count_eligible_targets%~) ~%store%~
        END
        PATCH_PHP_EACH ~cnt_targets~ AS container => _ BEGIN
            SET count_eligible_targets += 1
            SPRINT $eligible_targets(~%count_eligible_targets%~) ~%container%~
        END

        PATCH_IF count_is_percent == 1 BEGIN
            SET count = count_eligible_targets / count * 100
        END

        PATCH_PRINT ~Cibles potentielles pour %target% : %count_eligible_targets% / %count%~ PATCH_SILENT

        LPF ~tool#array#get_random~ INT_VAR array_count = count_eligible_targets number_to_select = count STR_VAR array = ~eligible_targets~ RET count_targets = count_selected RET_ARRAY targets = selected_array END
    END
END

DEFINE_PATCH_FUNCTION ~selector#target#get_bypercent~
    INT_VAR
        percent = 100
    STR_VAR
        target = ~~
    RET_ARRAY
        targets
BEGIN
    // Retourne un nombre de cible aléatoire égal à un pourcentage
    // Si 100 : appèlera ~target#get_all~
    // Sinon appèlera ~target#get_multiple~ avec le nombre de cible à fournir
END

DEFINE_PATCH_FUNCTION ~selector#target#get_by_range~
    INT_VAR
        min = 0
        max = 0
    STR_VAR
        target = ~~
    RET_ARRAY
        targets
BEGIN
    // Retourne un nombre de cible aléatoire contenu entre min et max
    // déterminera un nombre aléatoire entre min et max
    // Appèlera ~target#get_multiple~ avec le nombre de cible calculé
END


DEFINE_PATCH_FUNCTION ~selector#target#get_all~
    STR_VAR
        target = ~~
    RET_ARRAY
        targets
BEGIN
    // Retourne toutes les cibles
END

DEFINE_PATCH_MACRO ~selector#target#filter~
BEGIN
    LPF ~tool#string#explode~ STR_VAR string = ~%target%~ separator = ~&~ RET_ARRAY parts END

    PATCH_PHP_EACH parts AS index => part BEGIN
        SET $group_count(~group_temporary~) = 0
        CLEAR_ARRAY group_temporary

        LPF ~selector#target#determine_group~ STR_VAR part RET is_negative group_name group_type RET_ARRAY group_count group_temporary END

        // On s'assure que le groupe désiré existe
        PATCH_IF NOT VARIABLE_IS_SET $group_count(~%group_name%~) BEGIN
            PATCH_FAIL ~%target% : Invalid group (%part%)~
        END

        PATCH_IF NOT VARIABLE_IS_SET $target_group_categories(~%group_type%~) BEGIN
            PATCH_FAIL ~%target% : Invalid group type (%group_type%)~
        END

        SPRINT target_group_category $target_group_categories(~%group_type%~)

        PATCH_MATCH ~%target_group_category%~
        WITH
            ~cre~ BEGIN LPM ~selector#target#filter_cre~ END
            ~sto~ BEGIN LPM ~selector#target#filter_sto~ END
            ~cnt~ BEGIN LPM ~selector#target#filter_cnt~ END
            DEFAULT     LPM ~selector#target#filter_all~
        END
    END
END

DEFINE_PATCH_MACRO ~selector#target#filter_itm~
BEGIN
    PATCH_IF is_negative == 0 BEGIN
        LPF ~tool#array#intersect~ STR_VAR array = ~itm_targets~ array2 = ~%group_name%~ RET count_itm_targets = count RET_ARRAY itm_targets = new_array END
    END
    ELSE BEGIN
        LPF ~tool#array#diff~ STR_VAR array = ~itm_targets~ array2 = ~%group_name%~ RET count_itm_targets = count RET_ARRAY itm_targets = new_array END
    END
END

DEFINE_PATCH_MACRO ~selector#target#filter_cre~
BEGIN
    SET count_sto_targets = 0
    SET count_cnt_targets = 0

    CLEAR_ARRAY sto_targets
    CLEAR_ARRAY cnt_targets

    PATCH_IF is_negative == 0 BEGIN
        LPF ~tool#array#intersect~ STR_VAR array = ~cre_targets~ array2 = ~%group_name%~ RET count_cre_targets = count RET_ARRAY cre_targets = new_array END
    END
    ELSE BEGIN
        LPF ~tool#array#diff~ STR_VAR array = ~cre_targets~ array2 = ~%group_name%~ RET count_cre_targets = count RET_ARRAY cre_targets = new_array END
    END
END

DEFINE_PATCH_MACRO ~selector#target#filter_sto~
BEGIN
    SET count_cre_targets = 0
    SET count_cnt_targets = 0

    CLEAR_ARRAY cre_targets
    CLEAR_ARRAY cnt_targets

    PATCH_IF is_negative == 0 BEGIN
        LPF ~tool#array#intersect~ STR_VAR array = ~sto_targets~ array2 = ~%group_name%~ RET count_sto_targets = count RET_ARRAY sto_targets = new_array END
    END
    ELSE BEGIN
        LPF ~tool#array#diff~ STR_VAR array = ~sto_targets~ array2 = ~%group_name%~ RET count_sto_targets = count RET_ARRAY sto_targets = new_array END
    END
END

DEFINE_PATCH_MACRO ~selector#target#filter_cnt~
BEGIN
    SET count_cre_targets = 0
    SET count_sto_targets = 0

    CLEAR_ARRAY cre_targets
    CLEAR_ARRAY sto_targets

    PATCH_IF is_negative == 0 BEGIN
        LPF ~tool#array#intersect~ STR_VAR array = ~cnt_targets~ array2 = ~%group_name%~ RET count_cnt_targets = count RET_ARRAY cnt_targets = new_array END
    END
    ELSE BEGIN
        LPF ~tool#array#diff~ STR_VAR array = ~cnt_targets~ array2 = ~%group_name%~ RET count_cnt_targets = count RET_ARRAY cnt_targets = new_array END
    END
END

DEFINE_PATCH_MACRO ~selector#target#filter_all~
BEGIN
    PATCH_IF is_negative == 0 BEGIN
        LPF ~tool#array#intersect~ STR_VAR array = ~cre_targets~ array2 = ~%group_name%~ RET count_cre_targets = count RET_ARRAY cre_targets = new_array END
        LPF ~tool#array#intersect~ STR_VAR array = ~sto_targets~ array2 = ~%group_name%~ RET count_sto_targets = count RET_ARRAY sto_targets = new_array END
        LPF ~tool#array#intersect~ STR_VAR array = ~cnt_targets~ array2 = ~%group_name%~ RET count_cnt_targets = count RET_ARRAY cnt_targets = new_array END
    END
    ELSE BEGIN
        LPF ~tool#array#diff~ STR_VAR array = ~cre_targets~ array2 = ~%group_name%~ RET count_cre_targets = count RET_ARRAY cre_targets = new_array END
        LPF ~tool#array#diff~ STR_VAR array = ~sto_targets~ array2 = ~%group_name%~ RET count_sto_targets = count RET_ARRAY sto_targets = new_array END
        LPF ~tool#array#diff~ STR_VAR array = ~cnt_targets~ array2 = ~%group_name%~ RET count_cnt_targets = count RET_ARRAY cnt_targets = new_array END
    END
END

DEFINE_PATCH_FUNCTION ~selector#target#parse_part~
    STR_VAR
        part = ~~
    RET
        is_negative
        group_name
        group_type
BEGIN
    INNER_PATCH ~%part%~ BEGIN
        REPLACE_EVALUATE ~\(!?\)\(.+\)~ BEGIN
            SET is_negative = ~%MATCH1%~ STRING_EQUAL ~!~ ? 1 : 0
            SPRINT group ~%MATCH2%~
        END ~~
    END
    INNER_PATCH ~%group%~ BEGIN
        REPLACE_EVALUATE ~\(.+\)\.\(.+\)~ BEGIN
            SPRINT group_name ~%MATCH1%~
            SPRINT group_type ~%MATCH2%~
        END ~~
    END
END

DEFINE_PATCH_FUNCTION ~selector#target#determine_group~
    STR_VAR
        part = ~~
    RET
        is_negative
        group_name
        group_type
    RET_ARRAY
        group_count
        group_temporary
BEGIN
    LPF ~selector#target#parse_part~ STR_VAR part RET is_negative group_name group_type END

    PATCH_IF (~%group_type%~ STRING_EQUAL ~cre~ OR ~%group_type%~ STRING_EQUAL ~sto~) BEGIN
        PATCH_IF NOT ~%group_name%~ STRING_EQUAL ~?~ BEGIN
            PATCH_IF is_negative == 0 AND NOT FILE_EXISTS_IN_GAME ~%group_name%.%group_type%~ BEGIN
                PATCH_FAIL ~%target% : Target %group_name%.%group_type% not exist~
            END
            SET $group_temporary(~%group_name%.%group_type%~) = 1
            SET $group_count(~group_temporary~) = 1
            SPRINT group_name ~group_temporary~
            SPRINT group_type ~grp~
        END
        ELSE BEGIN
            SPRINT group_name ~group_%group_type%_all~
        END
    END
    ELSE BEGIN
        PATCH_MATCH ~%group_type%~
        WITH
            ~cls~ BEGIN SPRINT group_name ~group_cre_class_%group_name%~ END
            ~gen~ BEGIN SPRINT group_name ~group_cre_general_%group_name%~ END
            ~gnd~ BEGIN SPRINT group_name ~group_cre_gender_%group_name%~ END
            ~kit~ BEGIN SPRINT group_name ~group_cre_kit_%group_name%~ END
            ~rce~ BEGIN SPRINT group_name ~group_cre_race_%group_name%~ END
            ~spc~ BEGIN SPRINT group_name ~group_cre_specific_%group_name%~ END
            ~alg~ BEGIN SPRINT group_name ~group_cre_alignment_%group_name%~ END
            ~lvl~ BEGIN
                PATCH_IF IS_AN_INT group_name BEGIN
                    SPRINT group_name ~group_cre_level_%group_name%~
                END
                ELSE BEGIN
                    LPF ~tool#range~ INT_VAR min = 1 max = 50 STR_VAR value = ~%group_name%~ RET min max END
                    FOR (level = min; level <= max; ++level) BEGIN
                        PATCH_PHP_EACH ~group_cre_level_%level%~ AS creature => _ BEGIN
                            SET $group_temporary(~%creature%~) = 1
                            SET $group_count(~group_temporary~) += 1
                        END
                    END
                    SPRINT group_name ~group_temporary~
                    SPRINT group_type ~grp~
                END
            END

            ~2hd~ BEGIN SPRINT group_name ~group_itm_two_handed~ END
            ~arm~ BEGIN SPRINT group_name ~group_itm_armor_type_%group_name%~ END
            ~cat~ BEGIN SPRINT group_name ~group_itm_category_%group_name%~ END
            ~slt~ BEGIN SPRINT group_name ~group_itm_slot_%group_name%~ END
            ~ilv~ BEGIN
                PATCH_IF IS_AN_INT group_name BEGIN
                    SPRINT group_name ~group_itm_enchantment_%group_name%~
                END
                ELSE BEGIN
                    LPF ~tool#range~ INT_VAR min = 0 max = 6 STR_VAR value = ~%group_name%~ RET min max END
                    FOR (level = min; level <= max; ++level) BEGIN
                        PATCH_PHP_EACH ~group_itm_enchantment_%level%~ AS creature => _ BEGIN
                            SET $group_temporary(~%creature%~) = 1
                            SET $group_count(~group_temporary~) += 1
                        END
                    END
                    SPRINT group_name ~group_temporary~
                    SPRINT group_type ~grp~
                END
            END

            ~prc~ BEGIN SPRINT group_name ~group_sto_purchase_%group_name%~ END
            ~stt~ BEGIN SPRINT group_name ~group_sto_type_%group_name%~ END

            ~igr~ BEGIN
                PATCH_MATCH ~%group_name%~
                WITH
                    ~cursed~ BEGIN SPRINT group_name ~group_itm_cursed~ END
                    ~magical~ BEGIN SPRINT group_name ~group_itm_magical~ END
                    ~movable~ BEGIN SPRINT group_name ~group_itm_movable~ END
                    ~two_handed~ BEGIN SPRINT group_name ~group_itm_two_handed~ END
                    DEFAULT
                END
            END

            ~grp~ BEGIN SPRINT group_name ~group_%group_name%~ END
            DEFAULT
        END
    END
END