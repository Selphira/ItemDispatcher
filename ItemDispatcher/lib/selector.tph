DEFINE_PATCH_FUNCTION ~selector#item#get~
    INT_VAR
        count = 0
        count_is_percent = 0
    STR_VAR
        target = ~~
    RET
        count_items
    RET_ARRAY
        items
BEGIN
    LPM ~selector#item#get~

    PATCH_IF is_random == 1 BEGIN
        LPF ~log#add#debug~ STR_VAR message = ~Objets potentiels pour %target% : %count_eligible_targets%~ END
        LPF ~tool#array#get_random~ INT_VAR array_count = count_eligible_targets number_to_select = count STR_VAR array = ~eligible_targets~ RET count_items = count_selected RET_ARRAY items = selected_array END
    END
END

DEFINE_PATCH_FUNCTION ~selector#item#count~
    INT_VAR
        count = 0
        count_is_percent = 0
    STR_VAR
        target = ~~
    RET
        count_items
BEGIN
    LPM ~selector#item#get~

    PATCH_IF is_random == 1 BEGIN
        SET count_items = count
        PATCH_IF count_is_percent == 0 AND count > count_eligible_targets BEGIN
            SET count_items = count_eligible_targets
        END
    END
END

DEFINE_PATCH_MACRO ~selector#item#get~
BEGIN
    SET count_items = 0
    SET count_eligible_targets = 0
    SET count_itm_targets = 0
    SET is_random = 0

    CLEAR_ARRAY eligible_targets
    CLEAR_ARRAY items
    CLEAR_ARRAY itm_targets

    PATCH_IF ~%target%~ STRING_MATCHES_REGEXP ~^[a-z0-9_#]+\.itm$~ == 0 BEGIN
        SPRINT $items(1) ~%target%~
        SET count_items = 1
        SET count = 1
    END
    ELSE BEGIN
        SET is_random = 1
        LPF ~tool#array#clone~ STR_VAR array = ~group_itm_all~ RET count_itm_targets = count RET_ARRAY itm_targets = new_array END
        LPM ~selector#item#filter~

        // Toutes les cibles potentielles sont placées dans un unique tableau
        PATCH_PHP_EACH ~itm_targets~ AS item => _ BEGIN
            SET count_eligible_targets += 1
            SPRINT $eligible_targets(~%count_eligible_targets%~) ~%item%~
        END

        PATCH_IF count_is_percent == 1 BEGIN
            SET count = count_eligible_targets * 100 / count
        END
    END
END

DEFINE_PATCH_MACRO ~selector#item#filter~
BEGIN
    // On ne garde que les objets déplaçables éligibles à la sélection aléatoire
    LPF ~tool#array#intersect~ INT_VAR count_array = count_itm_targets count_array2 = $group_count(~group_itm_movable~) STR_VAR array = ~itm_targets~ array2 = ~group_itm_movable~ RET count_itm_targets = count RET_ARRAY itm_targets = new_array END

    LPF ~tool#string#explode~ STR_VAR string = ~%target%~ separator = ~&~ RET_ARRAY parts END

    PATCH_PHP_EACH parts AS index => part BEGIN
        SET $group_count(~group_temporary~) = 0
        CLEAR_ARRAY group_temporary

        LPF ~selector#target#determine_group~ STR_VAR part RET is_negative group_name group_type RET_ARRAY group_count group_temporary END

        // On s'assure que le groupe désiré existe
        PATCH_IF NOT VARIABLE_IS_SET $group_count(~%group_name%~) BEGIN
            PATCH_FAIL ~%target% : Invalid group (%part%)~
        END

        PATCH_IF NOT VARIABLE_IS_SET $target_group_categories(~%group_type%~) BEGIN
            PATCH_FAIL ~%target% : Invalid group type (%group_type%)~
        END

        SPRINT target_group_category $target_group_categories(~%group_type%~)

        PATCH_IF NOT ~%target_group_category%~ STRING_EQUAL ~itm~ AND NOT ~%target_group_category%~ STRING_EQUAL ~~ BEGIN
            PATCH_FAIL ~%target% : Invalid group category (%target_group_category%)~
        END

        LPM ~selector#target#filter_itm~
    END
END

DEFINE_PATCH_FUNCTION ~selector#target#is_complex~
    STR_VAR
        target = ~~
    RET
        is_complex
BEGIN
    SET is_complex = 0

    PATCH_IF ~%target%~ STRING_MATCHES_REGEXP ~.*[&!].+~ == 0 BEGIN
        SET is_complex = 1
    END
END

DEFINE_PATCH_FUNCTION ~selector#target#get~
    INT_VAR
        count = 0
        count_is_percent = 0
        item_is_equipable = 0
        item_count = 1
    STR_VAR
        target = ~~
        item = ~~
    RET
        count_targets
    RET_ARRAY
        targets
BEGIN
    LPM ~selector#target#get~

    PATCH_IF is_random == 1 BEGIN
        LPF ~log#add#debug~ STR_VAR message = ~Cibles potentielles pour %target% : %count_eligible_targets%~ END
        LPF ~tool#array#get_random~ INT_VAR array_count = count_eligible_targets number_to_select = count STR_VAR array = ~eligible_targets~ RET count_targets = count_selected RET_ARRAY targets = selected_array END
    END
END

DEFINE_PATCH_FUNCTION ~selector#target#count~
    INT_VAR
        count = 0
        count_is_percent = 0
        item_is_equipable = 0
        item_count = 1
    STR_VAR
        target = ~~
        item = ~~
    RET
        count_targets
BEGIN
    LPM ~selector#target#get~

    PATCH_IF is_random == 1 BEGIN
        SET count_targets = count
        PATCH_IF count_is_percent == 0 AND count > count_eligible_targets BEGIN
            SET count_targets = count_eligible_targets
        END
    END
END

DEFINE_PATCH_MACRO ~selector#target#get~
BEGIN
    SET count_targets = 0
    SET count_eligible_targets = 0
    SET count_cre_targets = 0
    SET count_sto_targets = 0
    SET count_cnt_targets = 0
    SET is_random = 0

    CLEAR_ARRAY targets
    CLEAR_ARRAY eligible_targets
    CLEAR_ARRAY cre_targets
    CLEAR_ARRAY sto_targets
    CLEAR_ARRAY cnt_targets

    PATCH_IF ~%target%~ STRING_MATCHES_REGEXP ~^[a-z0-9_#]+\.\(cre\|sto\)$~ == 0 BEGIN
        PATCH_IF FILE_EXISTS_IN_GAME ~%target%~ BEGIN
            SPRINT $targets(1) ~%target%~
            SET count_targets = 1
            SET count = 1
        END
    END
    ELSE BEGIN
        SET is_random = 1
        LPF ~tool#array#clone~ STR_VAR array = ~group_cre_all~ RET count_cre_targets = count RET_ARRAY cre_targets = new_array END
        LPF ~tool#array#clone~ STR_VAR array = ~group_sto_all~ RET count_sto_targets = count RET_ARRAY sto_targets = new_array END
        LPF ~tool#array#clone~ STR_VAR array = ~group_cnt_all~ RET count_cnt_targets = count RET_ARRAY cnt_targets = new_array END

        LPM ~selector#target#filter~

        // Toutes les cibles potentielles sont placées dans un unique tableau
        PATCH_PHP_EACH ~cre_targets~ AS creature => _ BEGIN
            SET count_eligible_targets += 1
            SPRINT $eligible_targets(~%count_eligible_targets%~) ~%creature%~
        END
        PATCH_PHP_EACH ~sto_targets~ AS store => _ BEGIN
            SET count_eligible_targets += 1
            SPRINT $eligible_targets(~%count_eligible_targets%~) ~%store%~
        END
        PATCH_PHP_EACH ~cnt_targets~ AS container => _ BEGIN
            SET count_eligible_targets += 1
            SPRINT $eligible_targets(~%count_eligible_targets%~) ~%container%~
        END

        PATCH_IF count_is_percent == 1 BEGIN
            SET count = count_eligible_targets * 100 / count
        END
    END
END

DEFINE_PATCH_FUNCTION ~selector#target#get_bypercent~
    INT_VAR
        percent = 100
    STR_VAR
        target = ~~
    RET_ARRAY
        targets
BEGIN
    // Retourne un nombre de cible aléatoire égal à un pourcentage
    // Si 100 : appèlera ~target#get_all~
    // Sinon appèlera ~target#get_multiple~ avec le nombre de cible à fournir
END

DEFINE_PATCH_FUNCTION ~selector#target#get_by_range~
    INT_VAR
        min = 0
        max = 0
    STR_VAR
        target = ~~
    RET_ARRAY
        targets
BEGIN
    // Retourne un nombre de cible aléatoire contenu entre min et max
    // déterminera un nombre aléatoire entre min et max
    // Appèlera ~target#get_multiple~ avec le nombre de cible calculé
END


DEFINE_PATCH_FUNCTION ~selector#target#get_all~
    STR_VAR
        target = ~~
    RET_ARRAY
        targets
BEGIN
    // Retourne toutes les cibles
END

DEFINE_PATCH_MACRO ~selector#target#filter~
BEGIN
    INNER_ACTION BEGIN
        // TODO: Traitement à faire que si on filtre des cibles de type "cre"
        COPY_EXISTING ~%item%~ ~override~
		    READ_LONG  0x18 flags
            READ_SHORT 0x1c category
            READ_BYTE  0x31 proficiency

            SET hand_count = (flags BAND BIT1) != 0 ? 2 : 1

            LOOKUP_IDS_SYMBOL_OF_INT category_name ~itemcat~ category
            LOOKUP_IDS_SYMBOL_OF_INT proficiency_name ~wprof~ proficiency

            TO_LOWER category_name
            TO_LOWER proficiency_name

            // On ne garde que les stores qui acceptent cette catégorie d'objet
            LPF ~tool#array#intersect~ INT_VAR count_array = count_sto_targets count_array2 = $group_count(~group_sto_purchase_%category_name%~) STR_VAR array = ~sto_targets~ array2 = ~group_sto_purchase_%category_name%~ RET count_sto_targets = count RET_ARRAY sto_targets = new_array END

            PATCH_IF item_is_equipable == 1 BEGIN
                LPF ~data#load#slot_type~ INT_VAR category RET slot_type END
                PATCH_IF STRING_LENGTH ~%slot_type%~ > 0 BEGIN
                    // On ne garde que les créatures dont l'emplacement de l'objet n'est pas rempli par un objet non droppable
                    LPF ~tool#array#diff~ STR_VAR array = ~cre_targets~ array2 = ~group_cre_locked_slot_%slot_type%~ RET count_cre_targets = count RET_ARRAY cre_targets = new_array END

                    // On ne garde que les créatures humanoïdes
                    LPF ~tool#array#intersect~ INT_VAR count_array = count_cre_targets count_array2 = $group_count(~group_cre_general_humanoid~) STR_VAR array = ~cre_targets~ array2 = ~group_cre_general_humanoid~ RET count_cre_targets = count RET_ARRAY cre_targets = new_array END

                    PATCH_IF ~%slot_type%~ STRING_EQUAL ~weapon~ BEGIN
                        // On ne garde que les créatures qui ont une compétence martiale pour l'arme sélectionnée ou une compétence martiale liée au nombre de main nécessaire pour manier l'arme
                        LPF ~tool#array#intersect~ INT_VAR count_array = count_cre_targets count_array2 = $group_count(~group_2da_cre-proficiency-%hand_count%h-%proficiency_name%~) STR_VAR array = ~cre_targets~ array2 = ~group_cre-proficiency-%hand_count%h-%proficiency_name%~ RET count_cre_targets = count RET_ARRAY cre_targets = new_array END
                    END
                    ELSE PATCH_IF ~%slot_type%~ STRING_EQUAL ~shield~ BEGIN
                        // On ne garde que les créatures qui ont une compétence martiale dans épée et bouclier
                        LPF ~tool#array#intersect~ INT_VAR count_array = count_cre_targets count_array2 = $group_count(~group_cre_proficiency_proficiencyswordandshield~) STR_VAR array = ~cre_targets~ array2 = ~group_cre_proficiency_proficiencyswordandshield~ RET count_cre_targets = count RET_ARRAY cre_targets = new_array END
                    END
                END
            END
            ELSE BEGIN
                // On ne garde que les créatures possédant assez d'emplacements d'inventaire libres
                FOR (index = item_count - 1; index >= 1; --index) BEGIN
                    LPF ~tool#array#merge~ STR_VAR array = ~cre_targets~ array2 = ~group_cre_empty_inventory_slots_%index%~ RET count_cre_targets = count RET_ARRAY cre_targets = array END
                END
            END
        BUT_ONLY
    END

    LPF ~tool#string#explode~ STR_VAR string = ~%target%~ separator = ~&~ RET_ARRAY tmp_parts = parts END

    // Optimisation pour les cas où l'on veut écarter toute une série de cibles bien précises
    // Ex: "gnome.rce&male.gnd&!npcs.grp&!udsvir07.cre&!quaylem.cre&!pptiax2.cre"
    CLEAR_ARRAY ~parts~
    CLEAR_ARRAY ~group_temporary~
    SET $group_count(~group_temporary~) = 0
    // TODO: Optimiser en testant group_type une seule fois, lorsque la fonction saura sur quoi travailler
    PATCH_PHP_EACH tmp_parts AS index => part BEGIN
        LPF ~selector#target#parse_part~ STR_VAR part RET is_negative group_name group_type END

        PATCH_IF ~%group_type%~ STRING_EQUAL ~cre~ BEGIN
            SET $group_temporary(~%group_name%.%group_type%~) = 1
            SET $group_count(~group_temporary~) += 1
        END
        ELSE BEGIN
            SPRINT $parts(~%index%~) ~%part%~
        END
    END

    PATCH_IF $group_count(~group_temporary~) > 0 BEGIN
        SPRINT group_name ~group_temporary~
        SPRINT group_type ~grp~
        LPM ~selector#target#filter_cre~
    END
    // Fin de l'optimisation

    PATCH_PHP_EACH parts AS index => part BEGIN
        SET $group_count(~group_temporary~) = 0
        CLEAR_ARRAY group_temporary

        LPF ~selector#target#determine_group~ STR_VAR part RET is_negative group_name group_type RET_ARRAY group_count group_temporary END

        // On s'assure que le groupe désiré existe
        PATCH_IF NOT VARIABLE_IS_SET $group_count(~%group_name%~) BEGIN
            PATCH_FAIL ~%target% : Invalid group (%part%)~
        END

        PATCH_IF NOT VARIABLE_IS_SET $target_group_categories(~%group_type%~) BEGIN
            PATCH_FAIL ~%target% : Invalid group type (%group_type%)~
        END

        SPRINT target_group_category $target_group_categories(~%group_type%~)

        PATCH_MATCH ~%target_group_category%~
        WITH
            ~cre~ BEGIN LPM ~selector#target#filter_cre~ END
            ~sto~ BEGIN LPM ~selector#target#filter_sto~ END
            ~cnt~ BEGIN LPM ~selector#target#filter_cnt~ END
            DEFAULT     LPM ~selector#target#filter_all~
        END
    END
END

DEFINE_PATCH_MACRO ~selector#target#filter_itm~
BEGIN
    PATCH_IF is_negative == 0 BEGIN
        LPF ~tool#array#intersect~ INT_VAR count_array = count_itm_targets count_array2 = $group_count(~%group_name%~) STR_VAR array = ~itm_targets~ array2 = ~%group_name%~ RET count_itm_targets = count RET_ARRAY itm_targets = new_array END
    END
    ELSE BEGIN
        LPF ~tool#array#diff~ STR_VAR array = ~itm_targets~ array2 = ~%group_name%~ RET count_itm_targets = count RET_ARRAY itm_targets = new_array END
    END
END

DEFINE_PATCH_MACRO ~selector#target#filter_cre~
BEGIN
    SET count_sto_targets = 0
    SET count_cnt_targets = 0

    CLEAR_ARRAY sto_targets
    CLEAR_ARRAY cnt_targets

    PATCH_IF is_negative == 0 BEGIN
        LPF ~tool#array#intersect~ INT_VAR count_array = count_cre_targets count_array2 = $group_count(~%group_name%~) STR_VAR array = ~cre_targets~ array2 = ~%group_name%~ RET count_cre_targets = count RET_ARRAY cre_targets = new_array END
    END
    ELSE BEGIN
        LPF ~tool#array#diff~ STR_VAR array = ~cre_targets~ array2 = ~%group_name%~ RET count_cre_targets = count RET_ARRAY cre_targets = new_array END
    END
END

DEFINE_PATCH_MACRO ~selector#target#filter_sto~
BEGIN
    SET count_cre_targets = 0
    SET count_cnt_targets = 0

    CLEAR_ARRAY cre_targets
    CLEAR_ARRAY cnt_targets

    PATCH_IF is_negative == 0 BEGIN
        LPF ~tool#array#intersect~ INT_VAR count_array = count_sto_targets count_array2 = $group_count(~%group_name%~) STR_VAR array = ~sto_targets~ array2 = ~%group_name%~ RET count_sto_targets = count RET_ARRAY sto_targets = new_array END
    END
    ELSE BEGIN
        LPF ~tool#array#diff~ STR_VAR array = ~sto_targets~ array2 = ~%group_name%~ RET count_sto_targets = count RET_ARRAY sto_targets = new_array END
    END
END

DEFINE_PATCH_MACRO ~selector#target#filter_cnt~
BEGIN
    SET count_cre_targets = 0
    SET count_sto_targets = 0

    CLEAR_ARRAY cre_targets
    CLEAR_ARRAY sto_targets

    PATCH_IF is_negative == 0 BEGIN
        LPF ~tool#array#intersect~ INT_VAR count_array = count_cnt_targets count_array2 = $group_count(~%group_name%~) STR_VAR array = ~cnt_targets~ array2 = ~%group_name%~ RET count_cnt_targets = count RET_ARRAY cnt_targets = new_array END
    END
    ELSE BEGIN
        LPF ~tool#array#diff~ STR_VAR array = ~cnt_targets~ array2 = ~%group_name%~ RET count_cnt_targets = count RET_ARRAY cnt_targets = new_array END
    END
END

DEFINE_PATCH_MACRO ~selector#target#filter_all~
BEGIN
    PATCH_IF is_negative == 0 BEGIN
        LPF ~tool#array#intersect~ INT_VAR count_array = count_cre_targets count_array2 = $group_count(~%group_name%~) STR_VAR array = ~cre_targets~ array2 = ~%group_name%~ RET count_cre_targets = count RET_ARRAY cre_targets = new_array END
        LPF ~tool#array#intersect~ INT_VAR count_array = count_sto_targets count_array2 = $group_count(~%group_name%~) STR_VAR array = ~sto_targets~ array2 = ~%group_name%~ RET count_sto_targets = count RET_ARRAY sto_targets = new_array END
        LPF ~tool#array#intersect~ INT_VAR count_array = count_cnt_targets count_array2 = $group_count(~%group_name%~) STR_VAR array = ~cnt_targets~ array2 = ~%group_name%~ RET count_cnt_targets = count RET_ARRAY cnt_targets = new_array END
    END
    ELSE BEGIN
        LPF ~tool#array#diff~ STR_VAR array = ~cre_targets~ array2 = ~%group_name%~ RET count_cre_targets = count RET_ARRAY cre_targets = new_array END
        LPF ~tool#array#diff~ STR_VAR array = ~sto_targets~ array2 = ~%group_name%~ RET count_sto_targets = count RET_ARRAY sto_targets = new_array END
        LPF ~tool#array#diff~ STR_VAR array = ~cnt_targets~ array2 = ~%group_name%~ RET count_cnt_targets = count RET_ARRAY cnt_targets = new_array END
    END
END

DEFINE_PATCH_FUNCTION ~selector#target#parse_part~
    STR_VAR
        part = ~~
    RET
        is_negative
        group_name
        group_type
BEGIN
    INNER_PATCH ~%part%~ BEGIN
        REPLACE_EVALUATE ~\(!?\)\(.+\)~ BEGIN
            SET is_negative = ~%MATCH1%~ STRING_EQUAL ~!~ ? 1 : 0
            SPRINT group ~%MATCH2%~
        END ~~
    END
    INNER_PATCH ~%group%~ BEGIN
        REPLACE_EVALUATE ~\(.+\)\.\(.+\)~ BEGIN
            SPRINT group_name ~%MATCH1%~
            SPRINT group_type ~%MATCH2%~
        END ~~
    END
END

DEFINE_PATCH_FUNCTION ~selector#target#determine_group~
    STR_VAR
        part = ~~
    RET
        is_negative
        group_name
        group_type
    RET_ARRAY
        group_count
        group_temporary
BEGIN
    LPF ~selector#target#parse_part~ STR_VAR part RET is_negative group_name group_type END

    PATCH_IF (~%group_type%~ STRING_EQUAL ~cre~ OR ~%group_type%~ STRING_EQUAL ~sto~) BEGIN
        PATCH_IF NOT ~%group_name%~ STRING_EQUAL ~?~ BEGIN
            PATCH_IF is_negative == 0 AND NOT FILE_EXISTS_IN_GAME ~%group_name%.%group_type%~ BEGIN
                PATCH_FAIL ~%target% : Target %group_name%.%group_type% not exist~
            END
            SET $group_temporary(~%group_name%.%group_type%~) = 1
            SET $group_count(~group_temporary~) = 1
            SPRINT group_name ~group_temporary~
            SPRINT group_type ~grp~
        END
        ELSE BEGIN
            SPRINT group_name ~group_%group_type%_all~
        END
    END
    ELSE BEGIN
        PATCH_MATCH ~%group_type%~
        WITH
            ~cls~ BEGIN SPRINT group_name ~group_cre_class_%group_name%~ END
            ~gen~ BEGIN SPRINT group_name ~group_cre_general_%group_name%~ END
            ~gnd~ BEGIN SPRINT group_name ~group_cre_gender_%group_name%~ END
            ~kit~ BEGIN SPRINT group_name ~group_cre_kit_%group_name%~ END
            ~rce~ BEGIN SPRINT group_name ~group_cre_race_%group_name%~ END
            ~spc~ BEGIN SPRINT group_name ~group_cre_specific_%group_name%~ END
            ~alg~ BEGIN SPRINT group_name ~group_cre_alignment_%group_name%~ END
            ~prf~ BEGIN SPRINT group_name ~group_cre_proficiency_%group_name%~ END
            ~lvl~ BEGIN
                PATCH_IF IS_AN_INT group_name BEGIN
                    SPRINT group_name ~group_cre_level_%group_name%~
                END
                ELSE BEGIN
                    LPF ~tool#range~ INT_VAR min = 1 max = 50 STR_VAR value = ~%group_name%~ RET min max END
                    FOR (level = min; level <= max; ++level) BEGIN
                        PATCH_PHP_EACH ~group_cre_level_%level%~ AS creature => _ BEGIN
                            SET $group_temporary(~%creature%~) = 1
                            SET $group_count(~group_temporary~) += 1
                        END
                    END
                    SPRINT group_name ~group_temporary~
                    SPRINT group_type ~grp~
                END
            END
            ~str~ ~int~ ~wis~ ~dex~ ~con~ ~cha~ BEGIN
                SPRINT ability_score $ability_scores(~%group_type%~)

                PATCH_IF IS_AN_INT group_name BEGIN
                    SPRINT group_name ~group_cre_%ability_score%_%group_name%~
                END
                ELSE BEGIN
                    LPF ~tool#range~ INT_VAR min = 1 max = 25 STR_VAR value = ~%group_name%~ RET min max END
                    FOR (level = min; level <= max; ++level) BEGIN
                        PATCH_PHP_EACH ~group_cre_%ability_score%_%level%~ AS creature => _ BEGIN
                            SET $group_temporary(~%creature%~) = 1
                            SET $group_count(~group_temporary~) += 1
                        END
                    END
                    SPRINT group_name ~group_temporary~
                    SPRINT group_type ~cre~
                END
            END

            ~2hd~ BEGIN SPRINT group_name ~group_itm_two_handed~ END
            ~arm~ BEGIN SPRINT group_name ~group_itm_armor_type_%group_name%~ END
            ~cat~ BEGIN SPRINT group_name ~group_itm_category_%group_name%~ END
            ~slt~ BEGIN SPRINT group_name ~group_itm_slot_%group_name%~ END
            ~scl~ BEGIN
                PATCH_MATCH ~%group_name%~
                WITH
                    ~none~ ~abjuration~ ~conjuration~ ~divination~ ~enchantment~ ~illusion~ ~evocation~ ~necromancy~ ~alteration~ ~generalist~ BEGIN
                        SPRINT group_name ~group_itm_scroll_%group_name%~
                    END
                    DEFAULT
                        PATCH_IF IS_AN_INT group_name BEGIN
                            SPRINT group_name ~group_itm_scroll_%group_name%~
                        END
                        ELSE BEGIN
                            LPF ~tool#range~ INT_VAR min = 0 max = 6 STR_VAR value = ~%group_name%~ RET min max END
                            FOR (level = min; level <= max; ++level) BEGIN
                                PATCH_PHP_EACH ~group_itm_scroll_%level%~ AS creature => _ BEGIN
                                    SET $group_temporary(~%creature%~) = 1
                                    SET $group_count(~group_temporary~) += 1
                                END
                            END
                            SPRINT group_name ~group_temporary~
                            SPRINT group_type ~grp~
                        END
                END
            END
            ~ilv~ BEGIN
                PATCH_IF IS_AN_INT group_name BEGIN
                    SPRINT group_name ~group_itm_enchantment_%group_name%~
                END
                ELSE BEGIN
                    LPF ~tool#range~ INT_VAR min = 0 max = 6 STR_VAR value = ~%group_name%~ RET min max END
                    FOR (level = min; level <= max; ++level) BEGIN
                        PATCH_PHP_EACH ~group_itm_enchantment_%level%~ AS creature => _ BEGIN
                            SET $group_temporary(~%creature%~) = 1
                            SET $group_count(~group_temporary~) += 1
                        END
                    END
                    SPRINT group_name ~group_temporary~
                    SPRINT group_type ~grp~
                END
            END

            ~prc~ BEGIN SPRINT group_name ~group_sto_purchase_%group_name%~ END
            ~stt~ BEGIN SPRINT group_name ~group_sto_type_%group_name%~ END

            ~igr~ BEGIN
                PATCH_IF ~%group_name%~ STRING_EQUAL ~cursed~ BEGIN
                    SPRINT group_name ~group_itm_cursed~
                END
                ELSE PATCH_IF ~%group_name%~ STRING_EQUAL ~magical~ BEGIN
                    SPRINT group_name ~group_itm_magical~
                END
                ELSE PATCH_IF ~%group_name%~ STRING_EQUAL ~movable~ BEGIN
                    SPRINT group_name ~group_itm_movable~
                END
                ELSE PATCH_IF ~%group_name%~ STRING_EQUAL ~stackable~ BEGIN
                    SPRINT group_name ~group_itm_stackable~
                END
                ELSE PATCH_IF ~%group_name%~ STRING_EQUAL ~two_handed~ BEGIN
                    SPRINT group_name ~group_itm_two_handed~
                END
            END

            ~are~ BEGIN SPRINT group_name ~group_are_%group_name%~ END
            ~grp~ BEGIN SPRINT group_name ~group_2da_%group_name%~ END
            DEFAULT
        END
    END
END