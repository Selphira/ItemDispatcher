DEFINE_ACTION_MACRO ~dispatch#run~
BEGIN
    PRINT ~Préparation des distributions...~ SILENT
    LAM ~dispatch#prepare~
    PRINT ~Distribution des objets...~ SILENT
    LAM ~dispatch#apply~
END

DEFINE_ACTION_MACRO ~dispatch#prepare~
BEGIN
    COPY ~%workspace%/items.2da~ ~override~
        READ_2DA_ENTRIES_NOW ~rows~ 14
        FOR (row = 0; row < rows; ++row) BEGIN
            PATCH_TRY
                READ_2DA_ENTRY_FORMER ~rows~ row  0 row_item_quantity
                READ_2DA_ENTRY_FORMER ~rows~ row  1 row_item_per_target
                READ_2DA_ENTRY_FORMER ~rows~ row  2 row_stack_size
                READ_2DA_ENTRY_FORMER ~rows~ row  3 row_item
                READ_2DA_ENTRY_FORMER ~rows~ row  4 row_target_quantity
                READ_2DA_ENTRY_FORMER ~rows~ row  5 row_target
                READ_2DA_ENTRY_FORMER ~rows~ row  6 row_source
                READ_2DA_ENTRY_FORMER ~rows~ row  7 row_chapter
                READ_2DA_ENTRY_FORMER ~rows~ row  8 row_difficulty
                READ_2DA_ENTRY_FORMER ~rows~ row  9 row_equipable
                READ_2DA_ENTRY_FORMER ~rows~ row 10 row_stealable
                READ_2DA_ENTRY_FORMER ~rows~ row 11 row_droppable
                READ_2DA_ENTRY_FORMER ~rows~ row 12 row_chance
                READ_2DA_ENTRY_FORMER ~rows~ row 13 mod_name

                CLEAR_ARRAY chapters
                CLEAR_ARRAY difficulties
                CLEAR_ARRAY targets

                LPF ~tool#integer~  INT_VAR default = 100 min = 1 max = 100 STR_VAR value = ~%row_chance%~ RET chance = integer END
                LPF ~tool#quantity~ STR_VAR value = ~%row_item_quantity%~   RET item_quantity_is_percent = is_percent   item_quantity = quantity END
                // TODO: lire la source

                LPF ~selector#item#get~ INT_VAR count = item_quantity count_is_percent = item_quantity_is_percent STR_VAR target = ~%row_item%~ RET count_items RET_ARRAY items END

                PATCH_PHP_EACH ~items~ AS _ => item BEGIN
                    PATCH_IF RANDOM(1 100) <= chance BEGIN
                        LPF ~tool#boolean~        INT_VAR default = 0 STR_VAR value = ~%row_equipable%~ RET equipable = boolean END
                        LPF ~tool#quantity~ STR_VAR value = ~%row_target_quantity%~ RET target_quantity_is_percent = is_percent target_quantity = quantity END
                        LPF ~selector#target#get~ INT_VAR count = target_quantity count_is_percent = target_quantity_is_percent item_is_equipable = equipable STR_VAR target = ~%row_target%~ item RET count_targets RET_ARRAY targets END

                        INNER_ACTION BEGIN
                            COPY_EXISTING ~%item%~ ~override~
                                READ_SHORT 0x38 max_stack_size
                            BUT_ONLY
                        END

                        PATCH_PHP_EACH targets AS _ => target BEGIN
                            LPF ~tool#quantity~ STR_VAR value = ~%row_item_per_target%~ RET item_per_target_is_percent = is_percent item_per_target = quantity END
                            LPF ~tool#quantity~ STR_VAR value = ~%row_stack_size%~  RET stack_size_is_percent = is_percent  stack_size = quantity END
                            LPF ~tool#boolean~  INT_VAR default = 0 STR_VAR value = ~%row_stealable%~ RET stealable = boolean END
                            LPF ~tool#boolean~  INT_VAR default = 1 STR_VAR value = ~%row_droppable%~ RET droppable = boolean END
                            LPF ~tool#values~   INT_VAR min = 1 max = 22 STR_VAR value = ~%row_chapter%~   RET count_chapter = count    RET_ARRAY chapters = values END
                            LPF ~tool#values~   INT_VAR min = 1 max = 5 STR_VAR value = ~%row_difficulty%~ RET count_difficulty = count RET_ARRAY difficulties = values END

                            PATCH_IF stack_size_is_percent == 0 AND max_stack_size < stack_size BEGIN
                                SET stack_size = max_stack_size
                            END
                            PATCH_IF stack_size < 1 BEGIN
                                SET stack_size = 1
                            END

                            // TODO: Si un même objet est distribué plusieurs fois à la même cible, vérifier ses stacks
                            //       Eventuellement additionner les stack_size pour limiter le nombre de piles données
                            // Ex: On donne 3 piles de flèche (limité à 80 stacks de base)
                            //     - Pile 1 : 60 stacks
                            //     - Pile 2 : 20 stacks
                            //     - Pile 3 : 20 stacks
                            //     Resultat final : 1 pile de 80 et 1 pile de 20

                            PATCH_PRINT "Distribution de %item_per_target% pile(s) de %stack_size% de %item% vers %target% (equipable : %equipable% - volable : %stealable% - droppable : %droppable%)"
                            // TODO: Placer toutes les distributions validées dans des tableaux
                            // A la fin, ces tableaux seront traités pour agir réellement sur le jeu
                            // Ceci, afin de pouvoir gérer le fait qu'une même créature puisse avoir plusieurs objets aléatoires sur le même emplacement
                        END
                    END
                END
            WITH
                DEFAULT LPF ~log#add#error~ STR_VAR message = ~items.2da on line %row% : %ERROR_MESSAGE%~ END
            END
        END
    BUT_ONLY
END

DEFINE_ACTION_MACRO ~dispatch#apply~
BEGIN
END